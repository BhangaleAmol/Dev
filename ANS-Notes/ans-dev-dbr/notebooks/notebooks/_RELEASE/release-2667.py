# Databricks notebook source
# MAGIC %run ../_SHARED/FUNCTIONS/1.2/bootstrap

# COMMAND ----------

# MAGIC %run ../_SHARED/PARTIALS/1.2/header_silver_notebook

# COMMAND ----------

source_name = "EBS"

# COMMAND ----------

LKP_OE_INTRANSIT_LINES_ALL = spark.sql("""
 SELECT
  DISTINCT OEL.LINE_ID SALES_ORDER_LINE_ID,
  PLL.NEED_BY_DATE,
  DATE_SUB(PLL.NEED_BY_DATE, INT(POH.IN_TRANSIT_TIME)) RETD,
  POH.IN_TRANSIT_TIME INTRANSIT_TIME,
  PLL.PROMISED_DATE,
  DATE_SUB(PLL.PROMISED_DATE, INT(POH.IN_TRANSIT_TIME)) CETD,
  OEL.SHIPPING_QUANTITY_UOM,
  COALESCE(POL.cancel_flag, 'N') cancel_flag
FROM
  EBS.OE_DROP_SHIP_SOURCES ODS
  JOIN EBS.OE_ORDER_HEADERS_ALL OEH ON ODS.HEADER_ID = OEH.HEADER_ID
  JOIN EBS.OE_ORDER_LINES_ALL OEL ON OEH.HEADER_ID = OEL.HEADER_ID
  AND OEL.LINE_ID = ODS.LINE_ID
  LEFT JOIN EBS.PO_HEADERS_ALL POH ON POH.PO_HEADER_ID = ODS.PO_HEADER_ID --LEFT JOIN LKP_INTRANSIT ON POH.SEGMENT1 = LKP_INTRANSIT.SEGMENT1
  LEFT JOIN EBS.PO_LINE_LOCATIONS_ALL PLL ON PLL.LINE_LOCATION_ID = ODS.LINE_LOCATION_ID
  JOIN EBS.PO_LINES_ALL POL ON PLL.PO_LINE_ID = POL.PO_LINE_ID
WHERE
  OEL.SOURCE_TYPE_CODE = 'EXTERNAL'
  AND COALESCE(POL.cancel_flag, 'N') != 'Y'
  AND POH.PO_HEADER_ID IS NOT NULL
""")

LKP_OE_INTRANSIT_LINES_ALL.createOrReplaceTempView("LKP_OE_INTRANSIT_LINES_ALL")

# COMMAND ----------

count_ds = spark.sql("""
SELECT   
    COUNT(DISTINCT mtl_transaction_lot_numbers.LOT_NUMBER) AS lot_cnt,
    COUNT(DISTINCT LINE_ID)                                AS SALESORDERLINEID_CNT,
    COUNT(DISTINCT OE_ORDER_HEADERS_ALL.ORDER_NUMBER
    ||'~'
    ||OE_ORDER_LINES_ALL.LINE_NUMBER) AS COMB_CNT,
    OE_ORDER_HEADERS_ALL.ORDER_NUMBER,
    OE_ORDER_LINES_ALL.LINE_NUMBER
  FROM EBS.mtl_material_transactions,
    EBS.mtl_transaction_lot_numbers,
    EBS.OE_ORDER_LINES_ALL,
    EBS.OE_ORDER_HEADERS_ALL
  WHERE (mtl_material_transactions.SOURCE_CODE     = 'ORDER ENTRY'
  OR mtl_material_transactions.SOURCE_CODE        IS NULL)
  AND mtl_material_transactions.TRX_SOURCE_LINE_ID = OE_ORDER_LINES_ALL.LINE_ID
  AND OE_ORDER_LINES_ALL.HEADER_ID                 = OE_ORDER_HEADERS_ALL.HEADER_ID
  AND mtl_material_transactions.transaction_id     =mtl_transaction_lot_numbers.transaction_id
    --and WSH_DELIVERY_DETAILS.OE_INTERFACED_FLAG = 'Y'
  GROUP BY OE_ORDER_HEADERS_ALL.ORDER_NUMBER,
    OE_ORDER_LINES_ALL.LINE_NUMBER
   """)

count_ds.createOrReplaceTempView("count_ds")

# COMMAND ----------

APAC_SSD = spark.sql("""
SELECT  SO_LINE_ID,MAX(SCHEDULE_SHIP_DATE) SCHEDULE_SHIP_DATE 
FROM ebs.XX_PTO_SOA_SSD_DETAILS_V where SCHEDULE_SHIP_DATE <> 'To be confirmed'
GROUP BY SO_LINE_ID
 """)

APAC_SSD.createOrReplaceTempView("APAC_SSD")

# COMMAND ----------

main1 = (
spark.sql("""
SELECT

  DATE_ADD(OOLA.FULFILLMENT_DATE,INT(LKP_OILA.INTRANSIT_TIME))  actualPickDate,
  REPLACE(STRING(INT (RCTLA.CUSTOMER_TRX_LINE_ID)), ",", "")||'-'||'DROPSHIPMENTS' AS deliveryDetailId
FROM
  ebs.RA_CUSTOMER_TRX_LINES_ALL RCTLA
  INNER JOIN EBS.RA_CUSTOMER_TRX_ALL RCTA ON RCTLA.CUSTOMER_TRX_ID = RCTA.CUSTOMER_TRX_ID
  LEFT JOIN ebs.RA_CUSTOMER_TRX_LINES_ALL RCTLA1 ON RCTLA.LINK_TO_CUST_TRX_LINE_ID = RCTLA1.CUSTOMER_TRX_LINE_ID
  LEFT JOIN EBS.OE_ORDER_LINES_ALL OOLA ON INT(RCTLA.INTERFACE_LINE_ATTRIBUTE6) = OOLA.LINE_ID
  LEFT JOIN EBS.OE_ORDER_HEADERS_ALL OOHA ON OOLA.HEADER_ID = OOHA.HEADER_ID
  LEFT JOIN count_ds CNT ON cnt.ORDER_NUMBER = OOHA.ORDER_NUMBER AND cnt.LINE_NUMBER = OOLA.LINE_NUMBER
  LEFT JOIN EBS.MTL_SYSTEM_ITEMS_B msib ON OOLA.INVENTORY_ITEM_ID  = MSIB.Inventory_item_id AND OOLA.SHIP_FROM_ORG_ID   = MSIB.Organization_id 
  --LEFT JOIN LINE_ORDER_DETAILS ON  BIGINT(RCTLA.CUSTOMER_TRX_ID)
  --||'~'
  --||BIGINT(RCTLA.LINE_NUMBER) = LINE_ORDER_DETAILS.LINE_KEY
  LEFT JOIN LKP_OE_INTRANSIT_LINES_ALL LKP_OILA ON LKP_OILA.SALES_ORDER_LINE_ID = OOLA.LINE_ID

  LEFT JOIN APAC_SSD ON OOLA.LINE_ID = APAC_SSD.SO_LINE_ID
  
WHERE
 RCTLA.SALES_ORDER_SOURCE = 'ORDER ENTRY'
 AND RCTA.COMPLETE_FLAG   = 'Y'
  AND (
    RCTLA.INTERFACE_LINE_CONTEXT IN (
      'ORDER ENTRY',
      'INTERCOMPANY',
      'INVOICE_CONVERSION',
      'CR_AR_ADJ_CONVERSION',
      'DR_AR_ADJ_CONVERSION',
      'GLOBAL_PROCUREMENT',
      'MICROFLEX_INVOICE_CONVERSION'
    )
    OR RCTLA.INTERFACE_LINE_CONTEXT IS NULL
  )
 -- and RCTLA.CUSTOMER_TRX_LINE_ID= '1312473'
  and OOHA.ORDER_TYPE_ID IN 
  (
SELECT DISTINCT TRANSACTION_TYPE_ID
  FROM EBS.FND_LOOKUP_VALUES,
    EBS.OE_TRANSACTION_TYPES_TL
  WHERE OE_TRANSACTION_TYPES_TL.LANGUAGE    = 'US'
  AND FND_LOOKUP_VALUES.VIEW_APPLICATION_ID = '660'
  AND FND_LOOKUP_VALUES.LANGUAGE            = 'US'
  AND FND_LOOKUP_VALUES.LOOKUP_TYPE         = 'LINE_CATEGORY'
  AND upper(OE_TRANSACTION_TYPES_TL.NAME) LIKE '%DROP SHIPMENT%'
  )

  
 """)
 .transform(attach_source_column(source = source_name))
 .transform(attach_surrogate_key(columns = 'deliveryDetailId,_SOURCE'))
                               )
main1.createOrReplaceTempView("main1")

# COMMAND ----------

# MAGIC %sql
# MAGIC MERGE INTO s_supplychain.sales_shipping_lines_ebs
# MAGIC USING main1
# MAGIC ON s_supplychain.sales_shipping_lines_ebs._ID = main1._ID
# MAGIC WHEN MATCHED THEN
# MAGIC   UPDATE SET 
# MAGIC   s_supplychain.sales_shipping_lines_ebs.actualPickDate = main1.actualPickDate

# COMMAND ----------

# MAGIC %sql
# MAGIC MERGE INTO s_supplychain.sales_shipping_lines_agg
# MAGIC USING main1
# MAGIC ON s_supplychain.sales_shipping_lines_agg._ID = main1._ID
# MAGIC WHEN MATCHED THEN
# MAGIC   UPDATE SET 
# MAGIC   s_supplychain.sales_shipping_lines_agg.actualPickDate = main1.actualPickDate
