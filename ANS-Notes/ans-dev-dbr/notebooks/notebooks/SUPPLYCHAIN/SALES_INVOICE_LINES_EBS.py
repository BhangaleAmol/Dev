# Databricks notebook source
# MAGIC %run ../_SHARED/FUNCTIONS/1.2/bootstrap

# COMMAND ----------

# MAGIC %run ../_SHARED/PARTIALS/1.2/header_s_supplychain

# COMMAND ----------

# MAGIC %run ../_SCHEMA/s_supplychain.sales_invoice_lines

# COMMAND ----------

# LOAD DATASETS
if incremental:
  cutoff_value = get_cutoff_value(table_name, 'ebs.ra_customer_trx_lines_all', prune_days)
  ra_customer_trx_lines_all = load_incr_dataset('ebs.ra_customer_trx_lines_all', 'LAST_UPDATE_DATE', cutoff_value)
else:
  ra_customer_trx_lines_all = load_full_dataset('ebs.ra_customer_trx_lines_all')
  
# VIEWS
ra_customer_trx_lines_all.createOrReplaceTempView('ra_customer_trx_lines_all')

# COMMAND ----------

# SAMPLING
if sampling:
  ra_customer_trx_lines_all = ra_customer_trx_lines_all.limit(10)
  ra_customer_trx_lines_all.createOrReplaceTempView('ra_customer_trx_lines_all')

# COMMAND ----------

LKP_DELIVERY_NOTES = spark.sql("""
 SELECT
  STRING(LINE_ID) LINE_ID,
  DELIVERY_ID,
  DELIVERY_NOTE_DT DELIVERY_DT
FROM
  (
    SELECT
      LINE_ID,
      STRING(INT(MAX(WDA.DELIVERY_ID))) DELIVERY_ID,
      DATE_FORMAT(MAX(WDA.LAST_UPDATE_DATE), "yyyy/MM/dd") DELIVERY_NOTE_DT
    FROM
      EBS.OE_ORDER_LINES_ALL OOLA,
      EBS.WSH_DELIVERY_ASSIGNMENTS WDA,
      EBS.WSH_DELIVERY_DETAILS WDD,
      EBS.WSH_NEW_DELIVERIES WD
    WHERE
      OOLA.LINE_ID = WDD.SOURCE_LINE_ID
      AND WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
      AND WDD.DELIVERY_DETAIL_ID >= 1
      AND WDA.DELIVERY_ID = WD.DELIVERY_ID
      AND WDD.SOURCE_CODE = 'OE'
      AND WDA.DELIVERY_ASSIGNMENT_ID >= 1
      AND WD.DELIVERY_ID >= 1
    GROUP BY
      LINE_ID
  )    
""")

LKP_DELIVERY_NOTES.createOrReplaceTempView("LKP_DELIVERY_NOTES")

# COMMAND ----------

LKP_OE_INTRANSIT_LINES_ALL = spark.sql("""
 SELECT
  DISTINCT OEL.LINE_ID SALES_ORDER_LINE_ID,
  PLL.NEED_BY_DATE,
  DATE_SUB(PLL.NEED_BY_DATE, INT(POH.IN_TRANSIT_TIME)) RETD,
  POH.IN_TRANSIT_TIME INTRANSIT_TIME,
  PLL.PROMISED_DATE,
  DATE_SUB(PLL.PROMISED_DATE, INT(POH.IN_TRANSIT_TIME)) CETD,
  OEL.SHIPPING_QUANTITY_UOM,
  COALESCE(POL.cancel_flag, 'N') cancel_flag
FROM
  EBS.OE_DROP_SHIP_SOURCES ODS
  JOIN EBS.OE_ORDER_HEADERS_ALL OEH ON ODS.HEADER_ID = OEH.HEADER_ID
  JOIN EBS.OE_ORDER_LINES_ALL OEL ON OEH.HEADER_ID = OEL.HEADER_ID
  AND OEL.LINE_ID = ODS.LINE_ID
  LEFT JOIN EBS.PO_HEADERS_ALL POH ON POH.PO_HEADER_ID = ODS.PO_HEADER_ID --LEFT JOIN LKP_INTRANSIT ON POH.SEGMENT1 = LKP_INTRANSIT.SEGMENT1
  LEFT JOIN EBS.PO_LINE_LOCATIONS_ALL PLL ON PLL.LINE_LOCATION_ID = ODS.LINE_LOCATION_ID
  JOIN EBS.PO_LINES_ALL POL ON PLL.PO_LINE_ID = POL.PO_LINE_ID
WHERE
  OEL.SOURCE_TYPE_CODE = 'EXTERNAL'
  AND COALESCE(POL.cancel_flag, 'N') != 'Y'
  AND POH.PO_HEADER_ID IS NOT NULL
""")

LKP_OE_INTRANSIT_LINES_ALL.createOrReplaceTempView("LKP_OE_INTRANSIT_LINES_ALL")

# COMMAND ----------

LKP_LOT_NUMBER = spark.sql("""
  SELECT
  LINE_ID,
  CONCAT_WS(', ', COLLECT_LIST(DELIVERY_NOTE_DATE)) DELIVERY_NOTE_DATES,
  CONCAT_WS(', ', COLLECT_LIST(DELIVERY_ID)) DELIVERY_IDS,
  CONCAT_WS(', ', COLLECT_LIST(LOT_NUMBER)) LOT_NUMBER
FROM(
    SELECT
      --DISTINCT
      OE_ORDER_LINES_ALL.LINE_ID,
      INT(WDA.DELIVERY_ID),
      DATE_FORMAT(MAX(WDA.LAST_UPDATE_DATE), 'yyyy-MM-dd') DELIVERY_NOTE_DATE,
      WSH_DELIVERY_DETAILS.LOT_NUMBER
    FROM
      EBS.OE_ORDER_LINES_ALL,
      EBS.WSH_DELIVERY_ASSIGNMENTS WDA,
      EBS.WSH_DELIVERY_DETAILS,
      EBS.WSH_NEW_DELIVERIES WD
    WHERE
      OE_ORDER_LINES_ALL.LINE_ID = WSH_DELIVERY_DETAILS.SOURCE_LINE_ID
      AND WSH_DELIVERY_DETAILS.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
      AND WSH_DELIVERY_DETAILS.DELIVERY_DETAIL_ID >= 1
      AND WDA.DELIVERY_ID = WD.DELIVERY_ID
      AND WDA.DELIVERY_ASSIGNMENT_ID >= 1
      AND WD.DELIVERY_ID >= 1
    GROUP BY
      LINE_ID,
      WDA.DELIVERY_ID,
      WSH_DELIVERY_DETAILS.LOT_NUMBER
  )
GROUP BY
  LINE_ID
""")
LKP_LOT_NUMBER.createOrReplaceTempView("LKP_LOT_NUMBER")

# COMMAND ----------

X943_SENT_DATE = spark.sql("""
SELECT
  MIN(x943.creation_date) SENT_DATE,
  x943.ship_from_accnum,
  x943.order_header_id,
  x943.ORG_ID
FROM
  EBS.XX_RETURN_ORDER_DETAILS_INT x943
WHERE
  x943.so_number = x943.delivery_id
  AND x943.delivery_id = x943.so_number
  AND x943.ln_identifier_code = 'H'
  AND x943.order_type = 'RM'
GROUP BY
  x943.ship_from_accnum,
  x943.order_header_id,
  x943.ORG_ID
""")

X943_SENT_DATE.createOrReplaceTempView("X943_SENT_DATE")

# COMMAND ----------

DELIVERIES = spark.sql("""
 SELECT
  SOURCE_LINE_ID,
  SOURCE_HEADER_ID,
  MAX(X_SHIPDATE_945) SHIPDATE_945
FROM
  (
    SELECT
      DISTINCT SOURCE_LINE_ID,
      source_HEADER_ID,
      X_SHIPDATE_945
    FROM
      (
        SELECT
          WSH_DELIVERY_DETAILS.SOURCE_LINE_ID SOURCE_LINE_ID,
          WSH_DELIVERY_DETAILS.SOURCE_HEADER_ID SOURCE_HEADER_ID,
          (
            SELECT
              MAX(wms.SHIPDATE)
            FROM
              EBS.XX_SO_DELIVERY_LOAD_WMSDETAILS WMS
            WHERE
              wms.deliveryid = wda.delivery_id
              AND WMS.DELIVERYID >= 1
          ) X_SHIPDATE_945
        FROM
          EBS.WSH_DELIVERY_DETAILS,
          EBS.WSH_DELIVERY_ASSIGNMENTS WDA
        WHERE
          WSH_DELIVERY_DETAILS.SOURCE_CODE = 'OE'
          AND WSH_DELIVERY_DETAILS.OE_INTERFACED_FLAG = 'Y'
          AND WSH_DELIVERY_DETAILS.DELIVERY_DETAIL_ID >= 1
          AND WSH_DELIVERY_DETAILS.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
          AND WDA.DELIVERY_ASSIGNMENT_ID >= 1
      )
  )
GROUP BY
  SOURCE_LINE_ID,
  source_HEADER_ID
""").distinct()

DELIVERIES.createOrReplaceTempView("DELIVERIES")

# COMMAND ----------

COST = spark.sql("""
 select
  GL_ITEM_CST.start_date,
  GL_ITEM_CST.end_date,
  GL_ITEM_CST.acctg_cost,
  GL_ITEM_CST.inventory_item_id,
  GL_ITEM_CST.organization_id,
  GL_ITEM_CST.period_id,
  std_cost.std_cost,
  freight.freight,
  duty.duty,
  mark_up.mark_up,
  GSOB.CURRENCY_CODE
from
  EBS.GL_ITEM_CST
  left outer join (
    SELECT
      CM_CMPT_DTL.INVENTORY_ITEM_ID,
      CM_CMPT_DTL.ORGANIZATION_ID,
      CM_CMPT_DTL.COST_TYPE_ID,
      CM_CMPT_DTL.PERIOD_ID,
      SUM(CM_CMPT_DTL.CMPNT_COST) STD_COST
    FROM
      EBS.CM_CMPT_DTL
      INNER JOIN EBS.CM_CMPT_MST_B ON CM_CMPT_DTL.COST_CMPNTCLS_ID = CM_CMPT_MST_B.COST_CMPNTCLS_ID
    WHERE
      CM_CMPT_DTL.COST_TYPE_ID = 1000
      AND CM_CMPT_MST_B.COST_CMPNTCLS_CODE NOT IN (
        'DUTY',
        'DUTY-ADJ',
        'MEDICALTAX',
        'INFREIGHT',
        'INFREIGHT-ADJ',
        'SGA',
        'MUPADJ',
        'MARK UP',
        'SGA-ADJ'
      )
    GROUP BY
      CM_CMPT_DTL.INVENTORY_ITEM_ID,
      CM_CMPT_DTL.ORGANIZATION_ID,
      CM_CMPT_DTL.COST_TYPE_ID,
      CM_CMPT_DTL.PERIOD_ID
  ) std_cost on GL_ITEM_CST.inventory_item_id = std_cost.inventory_item_id
  and GL_ITEM_CST.organization_id = std_cost.organization_id
  and GL_ITEM_CST.period_id = std_cost.period_id
  left outer join (
    SELECT
      CM_CMPT_DTL.INVENTORY_ITEM_ID,
      CM_CMPT_DTL.ORGANIZATION_ID,
      CM_CMPT_DTL.COST_TYPE_ID,
      CM_CMPT_DTL.PERIOD_ID,
      SUM(CM_CMPT_DTL.CMPNT_COST) freight
    FROM
      EBS.CM_CMPT_DTL
      INNER JOIN EBS.CM_CMPT_MST_B ON CM_CMPT_DTL.COST_CMPNTCLS_ID = CM_CMPT_MST_B.COST_CMPNTCLS_ID
    WHERE
      CM_CMPT_DTL.COST_TYPE_ID = 1000
      AND CM_CMPT_MST_B.COST_CMPNTCLS_CODE IN ('INFREIGHT', 'INFREIGHT-ADJ')
    GROUP BY
      CM_CMPT_DTL.INVENTORY_ITEM_ID,
      CM_CMPT_DTL.ORGANIZATION_ID,
      CM_CMPT_DTL.COST_TYPE_ID,
      CM_CMPT_DTL.PERIOD_ID
  ) freight on GL_ITEM_CST.inventory_item_id = freight.inventory_item_id
  and GL_ITEM_CST.organization_id = freight.organization_id
  and GL_ITEM_CST.period_id = freight.period_id
  left outer join (
    SELECT
      CM_CMPT_DTL.INVENTORY_ITEM_ID,
      CM_CMPT_DTL.ORGANIZATION_ID,
      CM_CMPT_DTL.COST_TYPE_ID,
      CM_CMPT_DTL.PERIOD_ID,
      SUM(CM_CMPT_DTL.CMPNT_COST) duty
    FROM
      EBS.CM_CMPT_DTL
      INNER JOIN EBS.CM_CMPT_MST_B ON CM_CMPT_DTL.COST_CMPNTCLS_ID = CM_CMPT_MST_B.COST_CMPNTCLS_ID
    WHERE
      CM_CMPT_DTL.COST_TYPE_ID = 1000
      AND CM_CMPT_MST_B.COST_CMPNTCLS_CODE IN ('DUTY', 'DUTY-ADJ', 'MEDICALTAX')
    GROUP BY
      CM_CMPT_DTL.INVENTORY_ITEM_ID,
      CM_CMPT_DTL.ORGANIZATION_ID,
      CM_CMPT_DTL.COST_TYPE_ID,
      CM_CMPT_DTL.PERIOD_ID
  ) duty on GL_ITEM_CST.inventory_item_id = duty.inventory_item_id
  and GL_ITEM_CST.organization_id = duty.organization_id
  and GL_ITEM_CST.period_id = duty.period_id
  left outer join (
    SELECT
      CM_CMPT_DTL.INVENTORY_ITEM_ID,
      CM_CMPT_DTL.ORGANIZATION_ID,
      CM_CMPT_DTL.COST_TYPE_ID,
      CM_CMPT_DTL.PERIOD_ID,
      SUM(CM_CMPT_DTL.CMPNT_COST) mark_up
    FROM
      EBS.CM_CMPT_DTL
      INNER JOIN EBS.CM_CMPT_MST_B ON CM_CMPT_DTL.COST_CMPNTCLS_ID = CM_CMPT_MST_B.COST_CMPNTCLS_ID
    WHERE
      CM_CMPT_DTL.COST_TYPE_ID = 1000
      AND CM_CMPT_MST_B.COST_CMPNTCLS_CODE IN ('SGA', 'MUPADJ', 'MARK UP', 'SGA-ADJ')
    GROUP BY
      CM_CMPT_DTL.INVENTORY_ITEM_ID,
      CM_CMPT_DTL.ORGANIZATION_ID,
      CM_CMPT_DTL.COST_TYPE_ID,
      CM_CMPT_DTL.PERIOD_ID
  ) mark_up on GL_ITEM_CST.inventory_item_id = mark_up.inventory_item_id
  and GL_ITEM_CST.organization_id = mark_up.organization_id
  and GL_ITEM_CST.period_id = mark_up.period_id
  LEFT OUTER JOIN  EBS.HR_ORGANIZATION_INFORMATION HOU on GL_ITEM_CST.organization_id = HOU.organization_id
  AND  HOU.ORG_INFORMATION_CONTEXT = 'Accounting Information'
  INNER JOIN EBS.HR_OPERATING_UNITS HO ON HOU.ORG_INFORMATION3 = HO.ORGANIZATION_ID
  INNER JOIN EBS.GL_SETS_OF_BOOKS GSOB ON HO.SET_OF_BOOKS_ID = GSOB.SET_OF_BOOKS_ID
where
  GL_ITEM_CST.COST_TYPE_ID = 1000
    """)

COST.createOrReplaceTempView("COST")

# COMMAND ----------

W_EXCH_RATE_G = spark.sql("""
  SELECT 
    GL_DAILY_RATES.FROM_CURRENCY, 
    GL_DAILY_RATES.TO_CURRENCY, 
    GL_DAILY_RATES.CONVERSION_TYPE, 
    CAST(DATE_FORMAT(GL_DAILY_RATES.CONVERSION_DATE,"yyyyMMdd") AS INT) CONVERSION_DATE,
    GL_DAILY_RATES.FROM_CURRENCY FROM_CURCY_CD,
    GL_DAILY_RATES.TO_CURRENCY TO_CURCY_CD,
    GL_DAILY_RATES.CONVERSION_TYPE RATE_TYPE,
    GL_DAILY_RATES.CONVERSION_DATE START_DT,
    DATE_ADD(GL_DAILY_RATES.CONVERSION_DATE,1) END_DT,
    GL_DAILY_RATES.CONVERSION_RATE EXCH_RATE,
    GL_DAILY_RATES.CONVERSION_DATE EXCH_DT
  FROM 
    EBS.GL_DAILY_RATES
""")
W_EXCH_RATE_G.createOrReplaceTempView("W_EXCH_RATE_G")

# COMMAND ----------

TMP_CUSTOMER_LOCATION_USE = spark.sql("""
  SELECT 
    HZ_CUST_SITE_USES_ALL.SITE_USE_ID, 
    HZ_CUST_SITE_USES_ALL.LAST_UPDATE_DATE LAST_UPDATE_DATE1, 
    HZ_CUST_SITE_USES_ALL.LAST_UPDATED_BY, 
    HZ_CUST_SITE_USES_ALL.CREATION_DATE, 
    HZ_CUST_SITE_USES_ALL.CREATED_BY, 
    HZ_CUST_ACCOUNTS.CUST_ACCOUNT_ID, 
    HZ_CUST_SITE_USES_ALL.SITE_USE_CODE, 
    HZ_CUST_SITE_USES_ALL.LOCATION, 
    HZ_LOCATIONS.LOCATION_ID, 
    HZ_CUST_ACCT_SITES_ALL.CUST_ACCT_SITE_ID, 
    HZ_PARTY_SITES.PARTY_SITE_ID,
    HZ_CUST_ACCT_SITES_ALL.LAST_UPDATE_DATE LAST_UPDATE_DATE2,
    HZ_CUST_SITE_USES_ALL.STATUS, 
    HZ_CUST_SITE_USES_ALL.TERRITORY_ID
  FROM
    EBS.HZ_CUST_ACCT_SITES_ALL, 
    EBS.HZ_PARTY_SITES, 
    EBS.HZ_LOCATIONS, 
    EBS.HZ_CUST_ACCOUNTS, 
    EBS.HZ_CUST_SITE_USES_ALL 
  WHERE
    HZ_CUST_SITE_USES_ALL.CUST_ACCT_SITE_ID = HZ_CUST_ACCT_SITES_ALL.CUST_ACCT_SITE_ID 
    AND HZ_CUST_ACCT_SITES_ALL.PARTY_SITE_ID = HZ_PARTY_SITES.PARTY_SITE_ID
    AND HZ_PARTY_SITES.LOCATION_ID = HZ_LOCATIONS.LOCATION_ID
    AND HZ_CUST_ACCOUNTS.CUST_ACCOUNT_ID = HZ_CUST_ACCT_SITES_ALL.CUST_ACCOUNT_ID
""")

TMP_CUSTOMER_LOCATION_USE.createOrReplaceTempView("TMP_CUSTOMER_LOCATION_USE")

# COMMAND ----------

AR_RECEIVABLE_APPS_ALL_VW = spark.sql("""
SELECT AR_RECEIVABLE_APPLICATIONS_ALL.APPLIED_CUSTOMER_TRX_ID,
    SUM(AR_RECEIVABLE_APPLICATIONS_ALL.EARNED_DISCOUNT_TAKEN) Earned_discount_taken,
    SUM(AR_RECEIVABLE_APPLICATIONS_ALL.UNEARNED_DISCOUNT_TAKEN) Unearned_discount_taken
  FROM EBS.AR_RECEIVABLE_APPLICATIONS_ALL,
    EBS.AR_CASH_RECEIPTS_ALL
  WHERE AR_RECEIVABLE_APPLICATIONS_ALL.STATUS = 'APP'
  AND AR_RECEIVABLE_APPLICATIONS_ALL.CASH_RECEIPT_ID  IS NOT NULL
  AND AR_RECEIVABLE_APPLICATIONS_ALL.CASH_RECEIPT_ID   = AR_CASH_RECEIPTS_ALL.CASH_RECEIPT_ID
  GROUP BY AR_RECEIVABLE_APPLICATIONS_ALL.APPLIED_CUSTOMER_TRX_ID
 """)

AR_RECEIVABLE_APPS_ALL_VW.createOrReplaceTempView("AR_RECEIVABLE_APPS_ALL_VW")

# COMMAND ----------

RA_CUSTOMER_TRX_LINES_ALL_VW = spark.sql(""" 
  SELECT CUSTOMER_TRX_ID,
    SUM ( (QUANTITY_INVOICED * UNIT_SELLING_PRICE)) TOTAL_INVOICED_AMOUNT
  FROM EBS.RA_CUSTOMER_TRX_LINES_ALL
  GROUP BY CUSTOMER_TRX_ID
  """)
RA_CUSTOMER_TRX_LINES_ALL_VW.createOrReplaceTempView("RA_CUSTOMER_TRX_LINES_ALL_VW")

# COMMAND ----------

  ORDER_TYPE = spark.sql("""
  SELECT
  OE_TRANSACTION_TYPES_TL.DESCRIPTION,
  OE_TRANSACTION_TYPES_TL.NAME,
 REPLACE(
      STRING(INT (OE_TRANSACTION_TYPES_TL.TRANSACTION_TYPE_ID)),
      ",",
      ""
    )  ORDER_TYPE_ID,
     CASE
                WHEN (
                    upper(description) LIKE '%RETURN%'
                    OR upper(description) LIKE '%RMA%'
                ) THEN 'Y' ELSE 'N'
            END RETURN_FLG
FROM
  EBS.OE_TRANSACTION_TYPES_TL
WHERE
  OE_TRANSACTION_TYPES_TL.LANGUAGE = 'US'
  """)
ORDER_TYPE.createOrReplaceTempView("ORDER_TYPE")

# COMMAND ----------

  LINE_ORDER_DETAILS = spark.sql("""
SELECT BIGINT(A.CUSTOMER_TRX_ID)
    ||'~'
    ||BIGINT(A.LINE_NUMBER) LINE_KEY,
    A.SALES_ORDER,
    A.SALES_ORDER_LINE,
    A.SALES_ORDER_DATE,
    B.SCHEDULE_SHIP_DATE,
    B.ACTUAL_SHIPMENT_DATE
  FROM EBS.RA_CUSTOMER_TRX_LINES_ALL A,
    EBS.OE_ORDER_LINES_ALL B
  WHERE
    -- A.LINE_TYPE = 'LINE'
    A.line_type                   = 'LINE'
  AND A.Sales_Order_Line         IS NOT NULL
  AND A.Interface_Line_Attribute6 = B.Line_Id
    """)
LINE_ORDER_DETAILS.createOrReplaceTempView("LINE_ORDER_DETAILS")

# COMMAND ----------

LKP_ACCRUALS=spark.sql("""
select distinct customerid, style, SettlementDiscount, VolumeDiscount, EndCustomerRebate, BOGO, Coop, Others, TPR
from QV.GROSS_TO_NET_ACCRUALS 
where Division not in ('I','Industrial')
and Entity in ('5000','7473','5400','5100','2010','2120')
and not _deleted""")
LKP_ACCRUALS.createOrReplaceTempView('LKP_ACCRUALS')

# COMMAND ----------

QV_VIEW = spark.sql("""
select 
  ProductNumber AS productCode,
  UPPER(Style) AS productStyle
from
  qv.product_master_ind
union 
select 
  ProductNumber AS productCode,
  UPPER(Style) AS productStyle
from
  qv.product_master_med
union
  select 
  ProductNumber AS productCode,
  UPPER(Style) AS productStyle
from
  qv.product_master_su
union 
select 
  ProductNumber AS productCode,
  UPPER(Style) AS productStyle
from
  qv.product_master_nitritex
  union 
select 
  ProductNumber AS productCode,
  UPPER(Style) AS productStyle
from
  qv.product_master_ringers""")

QV_VIEW.createOrReplaceTempView('QV_VIEW')

# COMMAND ----------

main = spark.sql("""
SELECT /* RANGE_JOIN(WERG_COSTING_EXCH_DT, 100) */
  REPLACE(STRING(INT (RCTLA.CREATED_BY)), ",", "") AS createdBy,
  RCTLA.CREATION_DATE AS createdOn,
  REPLACE(STRING(INT (RCTLA.LAST_UPDATED_BY)), ",", "") AS modifiedBy,
  RCTLA.LAST_UPDATE_DATE AS modifiedOn,
  CURRENT_TIMESTAMP() AS insertedOn,
  CURRENT_TIMESTAMP() AS updatedOn,
  (
    CASE
      WHEN DAY(RCTA.CREATION_DATE)>4 and date_format(RCTA.TRX_DATE, 'yyyyMM') < date_format(RCTA.CREATION_DATE, 'yyyyMM')  THEN 0
    ELSE (ACCRUALS.BOGO) * (CASE WHEN RCTLA.LINE_TYPE IN ('LINE' , 'CB') THEN RCTLA.EXTENDED_AMOUNT ELSE 0 END )
    END
  ) AS accrualBogo,
  (
    CASE
      WHEN DAY(RCTA.CREATION_DATE)>4 and date_format(RCTA.TRX_DATE, 'yyyyMM') < date_format(RCTA.CREATION_DATE, 'yyyyMM')  THEN 0
    ELSE (ACCRUALS.Coop) * (CASE WHEN RCTLA.LINE_TYPE IN ('LINE' , 'CB') THEN RCTLA.EXTENDED_AMOUNT ELSE 0 END )
    END
  ) AS accrualCoop,
  (
    CASE
      WHEN DAY(RCTA.CREATION_DATE)>4 and date_format(RCTA.TRX_DATE, 'yyyyMM') < date_format(RCTA.CREATION_DATE, 'yyyyMM')  THEN 0
    ELSE (ACCRUALS.EndCustomerRebate) * (CASE WHEN RCTLA.LINE_TYPE IN ('LINE' , 'CB') THEN RCTLA.EXTENDED_AMOUNT ELSE 0 END )
    END
  ) AS accrualEndUserRebate,
  (
    CASE
      WHEN DAY(RCTA.CREATION_DATE)>4 and date_format(RCTA.TRX_DATE, 'yyyyMM') < date_format(RCTA.CREATION_DATE, 'yyyyMM')  THEN 0
    ELSE (ACCRUALS.Others) * (CASE WHEN RCTLA.LINE_TYPE IN ('LINE' , 'CB') THEN RCTLA.EXTENDED_AMOUNT ELSE 0 END )
    END
  ) AS accrualOthers,
  (
    CASE
      WHEN DAY(RCTA.CREATION_DATE)>4 and date_format(RCTA.TRX_DATE, 'yyyyMM') < date_format(RCTA.CREATION_DATE, 'yyyyMM')  THEN 0
    ELSE (ACCRUALS.TPR) * (CASE WHEN RCTLA.LINE_TYPE IN ('LINE' , 'CB') THEN RCTLA.EXTENDED_AMOUNT ELSE 0 END )
    END
  )  AS  accrualTpr,
  (
    CASE
      WHEN DAY(RCTA.CREATION_DATE)>4 and date_format(RCTA.TRX_DATE, 'yyyyMM') < date_format(RCTA.CREATION_DATE, 'yyyyMM')  THEN 0
    ELSE (ACCRUALS.VolumeDiscount) * (CASE WHEN RCTLA.LINE_TYPE IN ('LINE' , 'CB') THEN RCTLA.EXTENDED_AMOUNT ELSE 0 END )
    END
  )  AS accrualVolumeDiscount,
  (
    CASE
      WHEN RCTLA.LINE_TYPE = 'LINE'
      AND RCTLA.Sales_Order_Line IS NOT NULL THEN OOLA.ACTUAL_SHIPMENT_DATE
    END
  ) AS actualDeliveryOn,
LINE_ORDER_DETAILS.Actual_Shipment_Date AS actualShipDate,
MSIB_ANS_STD_UOM.ATTRIBUTE15 AS ansStdUom,
  (
    CASE
      WHEN RCTLA.LINE_TYPE = 'LINE'
      THEN RCTLA.IUM2STDUOM
    END
  ) AS ansStdUomConv,
CASE WHEN RCTLA.LINE_TYPE IN ('LINE' , 'CB') THEN RCTLA.EXTENDED_AMOUNT ELSE 0 END  AS baseAmount,
  OOHA.BOOKED_DATE AS bookedDate,
  OOLA.BOOKED_FLAG AS bookedFlag,
  'N' AS cancelledFlag,
  (
    CASE
      WHEN RCTLA.LINE_TYPE = 'LINE'
      THEN RCTLA.IUM2CASE
    END
  ) AS caseUomConv,
  CAST(NULL AS date) AS cetd,
  '001' AS client,
  CAST(NULL AS STRING) AS customerLineNumber,
  OOLA.CUST_PO_NUMBER AS customerPoNumber,
  LKP_DN.DELIVERY_DT AS deliverNoteDate,
  LKP_DN.DELIVERY_ID AS deliveryNoteId,
  (CASE WHEN  RCTLA.INTERFACE_LINE_ATTRIBUTE11 IS NOT NULL AND RCTLA.INTERFACE_LINE_ATTRIBUTE11 <> '0' THEN 'Y' ELSE 'N' END) AS discountLineFlag,
  OOS.NAME AS distributionChannel,
  (
    CASE
      WHEN RCTA.INVOICE_CURRENCY_CODE = GSOB.CURRENCY_CODE THEN 1
      ELSE RCTA.EXCHANGE_RATE
    END
  ) AS exchangeRate,
  COALESCE(RCTA.EXCHANGE_DATE, RCTA.TRX_DATE) AS exchangeRateDate,
  LKP_OILA.INTRANSIT_TIME AS intransitTime,
  REPLACE(STRING(INT(OOLA.SHIP_FROM_ORG_ID)), ",", "") AS inventoryWarehouseId,
  REPLACE(
    STRING(INT (RCTLA.CUSTOMER_TRX_LINE_ID)),
    ",",
    ""
  ) AS invoiceDetailId,
  REPLACE(STRING(INT (RCTA.CUSTOMER_TRX_ID)), ",", "") AS invoiceId,
  RCTLA.UOM_CODE invoiceUomCode,
  REPLACE(
    STRING(
      INT (
        CASE
          WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.INVENTORY_ITEM_ID
          ELSE RCTLA1.INVENTORY_ITEM_ID
        END
      )
    ),
    ",",
    ""
  ) AS itemId,
  CASE
    WHEN RCTTA.TYPE = 'DM' THEN 0
    ELSE (
      (
        NVL(
          (
            CASE
      WHEN ( CASE WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.INVENTORY_ITEM_ID ELSE RCTLA1.INVENTORY_ITEM_ID  END) IS NULL THEN 0
      WHEN (CASE WHEN  RCTLA.INTERFACE_LINE_ATTRIBUTE11 IS NOT NULL AND RCTLA.INTERFACE_LINE_ATTRIBUTE11 <> '0' THEN 'Y' ELSE 'N' END) = 'Y' THEN 0
      WHEN RCTLA.LINE_TYPE IN ('TAX', 'FREIGHT') THEN 0
      WHEN RCTTA.TYPE in ('DM') THEN 0
      WHEN RCTTA.TYPE in ('CM')  THEN   (CASE WHEN ORDER_TYPE.RETURN_FLG = 'Y' THEN  RCTLA.QUANTITY_CREDITED ELSE 0 END)
      WHEN RCTLA.UNIT_SELLING_PRICE < 0  AND RCTLA.QUANTITY_INVOICED > 0 THEN (-1.0 * RCTLA.QUANTITY_INVOICED)
      ELSE RCTLA.QUANTITY_INVOICED
    END
          ),
          0
        ) * RCTLA.IUM2PUM
      ) * (
        NVL(COST.STD_COST, 0) + NVL(COST.FREIGHT, 0) + NVL(COST.DUTY, 0) + NVL(COST.MARK_UP, 0)
      ) * NVL(WERG_COSTING_EXCH_DT.EXCH_RATE, 1)
    )
  END AS legalEntityCost,
  CASE
    WHEN RCTTA.TYPE = 'DM' THEN 0
    ELSE (
      (
        NVL(
          (
             CASE
      WHEN ( CASE WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.INVENTORY_ITEM_ID ELSE RCTLA1.INVENTORY_ITEM_ID  END) IS NULL THEN 0
      WHEN (CASE WHEN  RCTLA.INTERFACE_LINE_ATTRIBUTE11 IS NOT NULL AND RCTLA.INTERFACE_LINE_ATTRIBUTE11 <> '0' THEN 'Y' ELSE 'N' END) = 'Y' THEN 0
      WHEN RCTLA.LINE_TYPE IN ('TAX', 'FREIGHT') THEN 0
      WHEN RCTTA.TYPE in ('DM') THEN 0
      WHEN RCTTA.TYPE in ('CM')  THEN   (CASE WHEN ORDER_TYPE.RETURN_FLG = 'Y' THEN  RCTLA.QUANTITY_CREDITED ELSE 0 END)
      WHEN RCTLA.UNIT_SELLING_PRICE < 0  AND RCTLA.QUANTITY_INVOICED > 0 THEN (-1.0 * RCTLA.QUANTITY_INVOICED)
      ELSE RCTLA.QUANTITY_INVOICED
    END
          ),
          0
        ) * RCTLA.IUM2PUM
      ) * (
        NVL(COST.STD_COST, 0) + NVL(COST.FREIGHT, 0) + NVL(COST.DUTY, 0) + NVL(COST.MARK_UP, 0)
      )
    )
  END AS legalEntityCostLeCurrency,
  RCTLA.LINE_TYPE AS lineType,
  LKP_LN.LOT_NUMBER AS lotNumber,
  LKP_OILA.NEED_BY_DATE AS needByDate,
  CASE
	 WHEN OOLA.LINE_CATEGORY_CODE = 'ORDER'
			THEN ROUND(OOLA.ORDERED_QUANTITY * (OOLA.UNIT_SELLING_PRICE), 2)
	ELSE 
            ROUND(OOLA.ORDERED_QUANTITY * (OOLA.UNIT_SELLING_PRICE), 2) * -1
  END orderAmount, 
  OOLA.ORDERED_ITEM AS orderedItem,
  CAST(NULL AS STRING) AS orderLineHoldType,
 CASE 
 WHEN RCTLA.LINE_TYPE =  'LINE' OR RCTLA.LINE_TYPE='FREIGHT' 
 THEN NVL(RCTLA.SALES_ORDER_LINE,LINE_ORDER_DETAILS.SALES_ORDER_LINE) 
 ELSE RCTLA1.SALES_ORDER_LINE END AS orderLineNumber,
  CASE
    WHEN OOLA.FLOW_STATUS_CODE IN ('BOOKED', 'ENTERED') THEN OOLA.FLOW_STATUS_CODE
    WHEN OOLA.FLOW_STATUS_CODE LIKE ('%CANCELLED%') THEN 'CANCELLED'
    WHEN OOLA.FLOW_STATUS_CODE LIKE ('%HOLD%') THEN 'BLOCKED'
    WHEN OOLA.FLOW_STATUS_CODE LIKE ('%CLOSED%') THEN 'CLOSED'
    ELSE 'BEING PROCESSED'
  END AS orderLineStatus,
   CASE WHEN  RCTLA.SALES_ORDER IS NOT NULL THEN RCTLA.SALES_ORDER ELSE LINE_ORDER_DETAILS.SALES_ORDER END  AS orderNumber,
  OOLA.FLOW_STATUS_CODE AS orderStatusDetail,
  (CASE WHEN ORDER_TYPE.RETURN_FLG='Y' THEN 'RETURN' ELSE 'ORDER' END )|| '-' || REPLACE(
    STRING(INT (OOHA.ORDER_TYPE_ID)),
    ",",
    "" ) AS ordertypeId,
  OOLA.ORDER_QUANTITY_UOM AS orderUomCode,
  REPLACE(STRING(INT (RCTA.ORG_ID)), ",", "") AS owningBusinessUnitId,
  REPLACE(STRING(INT (LTRIM(RTRIM(OOLA.PRICE_LIST_ID)))), ",", "") AS priceListId,
  PRICE_LIST.NAME AS priceListName,
  RCTLA.UNIT_SELLING_PRICE AS pricePerUnit,
  MSIB.PRIMARY_UOM_CODE AS primaryUomCode,
  RCTLA.IUM2PUM AS primaryUomConv,
  MSIB.SEGMENT1 AS productCode,
  LKP_OILA.PROMISED_DATE AS promiseDate,
  OOLA.PROMISE_DATE AS promisedOnDate,
  CAST(NULL AS decimal(22,7)) AS quantityBackordered,
  CAST(NULL AS decimal(22,7)) AS quantityCancelled,
   (
    CASE
      WHEN ( CASE WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.INVENTORY_ITEM_ID ELSE RCTLA1.INVENTORY_ITEM_ID  END) IS NULL THEN 0
      WHEN (CASE WHEN  RCTLA.INTERFACE_LINE_ATTRIBUTE11 IS NOT NULL AND RCTLA.INTERFACE_LINE_ATTRIBUTE11 <> '0' THEN 'Y' ELSE 'N' END) = 'Y' THEN 0
      WHEN RCTLA.LINE_TYPE IN ('TAX', 'FREIGHT') THEN 0
      WHEN RCTTA.TYPE in ('DM') THEN 0
      WHEN RCTTA.TYPE in ('CM')  THEN   (CASE WHEN ORDER_TYPE.RETURN_FLG = 'Y' THEN  RCTLA.QUANTITY_CREDITED ELSE 0 END)
      WHEN RCTLA.UNIT_SELLING_PRICE < 0  AND RCTLA.QUANTITY_INVOICED > 0 THEN (-1.0 * RCTLA.QUANTITY_INVOICED)
      ELSE RCTLA.QUANTITY_INVOICED
    END
  ) AS quantityInvoiced,
  CASE 
		WHEN OOLA.LINE_CATEGORY_CODE = 'ORDER'
			THEN ROUND(NVL(OOLA.ORDERED_QUANTITY,0), 2)
		ELSE 
            ROUND(nvl(OOLA.ORDERED_QUANTITY,0), 2) * -1
  END quantityOrdered,
  CAST(NULL AS decimal(22,7)) AS quantityReserved,
  CASE 
  WHEN (CASE WHEN  RCTLA.INTERFACE_LINE_ATTRIBUTE11 IS NOT NULL AND RCTLA.INTERFACE_LINE_ATTRIBUTE11 <> '0' THEN 'Y' ELSE 'N' END) = 'Y' THEN 0 
  WHEN ORDER_TYPE.RETURN_FLG = 'Y' THEN ROUND(nvl(OOLA.ORDERED_QUANTITY,0), 2) ELSE 0 END AS quantityReturned,
  CASE
    WHEN (CASE WHEN  RCTLA.INTERFACE_LINE_ATTRIBUTE11 IS NOT NULL AND RCTLA.INTERFACE_LINE_ATTRIBUTE11 <> '0' THEN 'Y' ELSE 'N' END) = 'Y' THEN 0
    WHEN RCTLA.LINE_TYPE IN ('TAX', 'FREIGHT') THEN 0
    WHEN RCTTA.TYPE in ('DM') THEN 0
    WHEN RCTTA.TYPE in ('CM') 
      THEN coalesce(OOLA.SHIPPED_QUANTITY, 0)  * -1
    ELSE 
      coalesce(OOLA.SHIPPED_QUANTITY, 0) 
  END AS quantityShipped,
  OOLA.REQUEST_DATE AS requestDeliveryBy,
  LKP_OILA.RETD AS retd,
   (CASE WHEN ORDER_TYPE.RETURN_FLG = 'Y' THEN rctla.extended_amount ELSE 0 END) * -1 returnAmount,
  (CASE
    WHEN (UPPER(ORDER_TYPE.DESCRIPTION) LIKE '%RETURN%'
    OR UPPER(ORDER_TYPE.DESCRIPTION) LIKE '%RMA%' )
    THEN 'Y'
    ELSE 'N'
  END) returnFlag,
  REPLACE(STRING(INT (CASE WHEN RCTLA.LINE_TYPE='LINE' AND MSIB.DESCRIPTION IN ('FREIGHT CHARGES','I/C - FREIGHT & TRANSPORTATION','I/C-AR-FREIGHT & TRANSPORTATION') THEN NULL ELSE OOHA.HEADER_ID END )), ",", "") AS salesOrderId,
    REPLACE(STRING(INT (CASE
                        WHEN RCTLA.LINE_TYPE='LINE' AND MSIB.DESCRIPTION IN ('FREIGHT CHARGES','I/C - FREIGHT & TRANSPORTATION','I/C-AR-FREIGHT & TRANSPORTATION') THEN NULL
                        WHEN RCTLA.INTERFACE_LINE_CONTEXT = 'ORDER ENTRY' THEN (CASE WHEN RCTLA.LINE_TYPE='LINE' THEN RCTLA.INTERFACE_LINE_ATTRIBUTE6 ELSE RCTLA1.INTERFACE_LINE_ATTRIBUTE6 END)  ELSE NULL END)), ",", "") salesorderDetailId,
  OOLA.SCHEDULE_SHIP_DATE AS scheduledShipDate,
  X943SD.SENT_DATE AS sentDate943,
  OOLA.SHIPMENT_NUMBER AS sequenceNumber,
  CASE
    WHEN RA_CUSTOMER_TRX_LINES_ALL_VW.TOTAL_INVOICED_AMOUNT <> 0
    AND( RCTLA.INTERFACE_LINE_CONTEXT    = 'ORDER ENTRY'
    OR RCTLA.INTERFACE_LINE_CONTEXT     IS NULL)
    AND ar_receivable_apps_all_vw.Earned_discount_taken <> 0
    THEN ROUND(((((RCTLA.QUANTITY_INVOICED * RCTLA.UNIT_SELLING_PRICE) / RA_CUSTOMER_TRX_LINES_ALL_VW.TOTAL_INVOICED_AMOUNT)) * AR_RECEIVABLE_APPS_ALL_VW.EARNED_DISCOUNT_TAKEN),2)
    ELSE 0
  END AS settlementDiscountEarned,
  (
    CASE
      WHEN DAY(RCTA.CREATION_DATE)>4 and date_format(RCTA.TRX_DATE, 'yyyyMM') < date_format(RCTA.CREATION_DATE, 'yyyyMM')  THEN 0  
    ELSE (ACCRUALS.SettlementDiscount) * (CASE WHEN RCTLA.LINE_TYPE IN ('LINE' , 'CB') THEN RCTLA.EXTENDED_AMOUNT ELSE 0 END )
    END
  ) AS settlementDiscountsCalculated,
  CASE
    WHEN RA_CUSTOMER_TRX_LINES_ALL_VW.TOTAL_INVOICED_AMOUNT <> 0
    AND( RCTLA.interface_line_context    =  'ORDER ENTRY'
    OR RCTLA.INTERFACE_LINE_CONTEXT     IS NULL)
    AND ar_receivable_apps_all_vw.Unearned_discount_taken <> 0
    THEN ROUND(((((RCTLA.QUANTITY_INVOICED * RCTLA.UNIT_SELLING_PRICE) / RA_CUSTOMER_TRX_LINES_ALL_VW.TOTAL_INVOICED_AMOUNT)) * AR_RECEIVABLE_APPS_ALL_VW.UNEARNED_DISCOUNT_TAKEN),2)
    ELSE 0
  END  AS settlementDiscountUnEarned,
  DEL.SHIPDATE_945 AS shipDate945,
  CASE
    WHEN RCTTA.TYPE = 'DM' THEN 0
    ELSE (
      (
        NVL(
          (
             CASE
      WHEN ( CASE WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.INVENTORY_ITEM_ID ELSE RCTLA1.INVENTORY_ITEM_ID  END) IS NULL THEN 0
      WHEN (CASE WHEN  RCTLA.INTERFACE_LINE_ATTRIBUTE11 IS NOT NULL AND RCTLA.INTERFACE_LINE_ATTRIBUTE11 <> '0' THEN 'Y' ELSE 'N' END) = 'Y' THEN 0
      WHEN RCTLA.LINE_TYPE IN ('TAX', 'FREIGHT') THEN 0
      WHEN RCTTA.TYPE in ('DM') THEN 0
      WHEN RCTTA.TYPE in ('CM')  THEN   (CASE WHEN ORDER_TYPE.RETURN_FLG = 'Y' THEN  RCTLA.QUANTITY_CREDITED ELSE 0 END)
      WHEN RCTLA.UNIT_SELLING_PRICE < 0  AND RCTLA.QUANTITY_INVOICED > 0 THEN (-1.0 * RCTLA.QUANTITY_INVOICED)
      ELSE RCTLA.QUANTITY_INVOICED
    END
          ),
          0
        ) * RCTLA.IUM2PUM
      ) * (
        NVL(COST.STD_COST, 0) + NVL(COST.FREIGHT, 0) + NVL(COST.DUTY, 0)
      ) * NVL(WERG_COSTING_EXCH_DT.EXCH_RATE, 1)
    )
  END AS seeThruCost,
  CASE
    WHEN RCTTA.TYPE = 'DM' THEN 0
    ELSE (
      (
        NVL(
          (
          CASE
      WHEN ( CASE WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.INVENTORY_ITEM_ID ELSE RCTLA1.INVENTORY_ITEM_ID  END) IS NULL THEN 0
      WHEN (CASE WHEN  RCTLA.INTERFACE_LINE_ATTRIBUTE11 IS NOT NULL AND RCTLA.INTERFACE_LINE_ATTRIBUTE11 <> '0' THEN 'Y' ELSE 'N' END) = 'Y' THEN 0
      WHEN RCTLA.LINE_TYPE IN ('TAX', 'FREIGHT') THEN 0
      WHEN RCTTA.TYPE in ('DM') THEN 0
      WHEN RCTTA.TYPE in ('CM')  THEN   (CASE WHEN ORDER_TYPE.RETURN_FLG = 'Y' THEN  RCTLA.QUANTITY_CREDITED ELSE 0 END)
      WHEN RCTLA.UNIT_SELLING_PRICE < 0  AND RCTLA.QUANTITY_INVOICED > 0 THEN (-1.0 * RCTLA.QUANTITY_INVOICED)
      ELSE RCTLA.QUANTITY_INVOICED
    END
          ),
          0
        ) * RCTLA.IUM2PUM
      ) * (
        NVL(COST.STD_COST, 0) + NVL(COST.FREIGHT, 0) + NVL(COST.DUTY, 0)
      )
    )
  END AS seeThruCostLeCurrency,
  SHIP_TO.SITE_USE_CODE || '-' || REPLACE(STRING(INT(SHIP_TO.SITE_USE_ID)), ",", "")  shipToAddressId,
  MP.ORGANIZATION_CODE AS warehouseCode
FROM
  ra_customer_trx_lines_all RCTLA
  INNER JOIN EBS.RA_CUSTOMER_TRX_ALL RCTA ON RCTLA.CUSTOMER_TRX_ID = RCTA.CUSTOMER_TRX_ID
  LEFT JOIN RA_CUSTOMER_TRX_LINES_ALL RCTLA1 ON RCTLA.LINK_TO_CUST_TRX_LINE_ID = RCTLA1.CUSTOMER_TRX_LINE_ID
  LEFT JOIN EBS.MTL_PARAMETERS MP ON (
    CASE
      WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.WAREHOUSE_ID
      ELSE RCTLA1.WAREHOUSE_ID
    END
  ) = MP.ORGANIZATION_ID
  LEFT JOIN COST ON (
    CASE
      WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.INVENTORY_ITEM_ID
      ELSE RCTLA1.INVENTORY_ITEM_ID
    END
  ) = COST.INVENTORY_ITEM_ID
  AND (
    CASE
      WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.WAREHOUSE_ID
      ELSE RCTLA1.WAREHOUSE_ID
    END
  ) = COST.organization_id
  AND RCTA.TRX_DATE BETWEEN COST.START_DATE
  AND COST.END_DATE
  LEFT JOIN EBS.OE_ORDER_LINES_ALL OOLA ON INT(CASE WHEN RCTLA.INTERFACE_LINE_CONTEXT = 'GLOBAL_PROCUREMENT' 
  THEN INT(000000000) ELSE RCTLA.INTERFACE_LINE_ATTRIBUTE6 END) = OOLA.LINE_ID
  LEFT JOIN EBS.OE_ORDER_HEADERS_ALL OOHA ON OOLA.HEADER_ID = OOHA.HEADER_ID
  LEFT JOIN LKP_OE_INTRANSIT_LINES_ALL LKP_OILA ON LKP_OILA.SALES_ORDER_LINE_ID = OOLA.LINE_ID
  LEFT JOIN EBS.GL_SETS_OF_BOOKS GSOB ON RCTA.SET_OF_BOOKS_ID = GSOB.SET_OF_BOOKS_ID
  LEFT JOIN EBS.MTL_SYSTEM_ITEMS_B MSIB ON OOLA.INVENTORY_ITEM_ID = MSIB.Inventory_item_id
    AND OOLA.SHIP_FROM_ORG_ID = MSIB.Organization_id
  LEFT JOIN QV_VIEW ON MSIB.SEGMENT1 = QV_VIEW.productCode
  LEFT JOIN EBS.HZ_CUST_ACCOUNTS ACCOUNTS ON ACCOUNTS.CUST_ACCOUNT_ID=RCTA.BILL_TO_CUSTOMER_ID
  LEFT JOIN LKP_ACCRUALS ACCRUALS ON ACCRUALS.CustomerID = ACCOUNTS.ACCOUNT_NUMBER
          AND QV_VIEW.productStyle = ACCRUALS.Style    
  INNER JOIN EBS.RA_CUST_TRX_TYPES_ALL RCTTA ON RCTA.CUST_TRX_TYPE_ID = RCTTA.CUST_TRX_TYPE_ID
    AND RCTA.ORG_ID = RCTTA.ORG_ID
  LEFT JOIN X943_SENT_DATE X943SD ON OOHA.ship_to_org_id = X943SD.ship_from_accnum
  AND INT(OOHA.header_id) = X943SD.order_header_id
  AND OOHA.ORG_ID = X943SD.ORG_ID
  LEFT JOIN DELIVERIES DEL ON OOLA.LINE_ID = DEL.SOURCE_LINE_ID
  AND OOLA.HEADER_ID = DEL.SOURCE_HEADER_ID
  LEFT JOIN LKP_DELIVERY_NOTES LKP_DN ON OOLA.LINE_ID = LKP_DN.LINE_ID
  LEFT JOIN LKP_LOT_NUMBER LKP_LN ON OOLA.LINE_ID = LKP_LN.LINE_ID
  LEFT JOIN W_EXCH_RATE_G WERG_COSTING_EXCH_DT ON COST.CURRENCY_CODE = WERG_COSTING_EXCH_DT.FROM_CURCY_CD
  AND RCTA.INVOICE_CURRENCY_CODE = WERG_COSTING_EXCH_DT.TO_CURCY_CD
  AND RCTA.TRX_DATE >= WERG_COSTING_EXCH_DT.START_DT
  AND RCTA.TRX_DATE < WERG_COSTING_EXCH_DT.END_DT
  AND UPPER(WERG_COSTING_EXCH_DT.RATE_TYPE) = 'CORPORATE'
  LEFT JOIN TMP_CUSTOMER_LOCATION_USE SHIP_TO   ON OOLA.SHIP_TO_ORG_ID = SHIP_TO.SITE_USE_ID
  LEFT JOIN (SELECT LIST_HEADER_ID,NAME FROM EBS.QP_LIST_HEADERS_TL WHERE LANGUAGE = 'US') PRICE_LIST ON OOLA.PRICE_LIST_ID = PRICE_LIST.LIST_HEADER_ID
  LEFT JOIN RA_CUSTOMER_TRX_LINES_ALL_VW ON RCTA.CUSTOMER_TRX_ID  = RA_CUSTOMER_TRX_LINES_ALL_VW.CUSTOMER_TRX_ID
  LEFT JOIN AR_RECEIVABLE_APPS_ALL_VW ON RCTA.CUSTOMER_TRX_ID  = AR_RECEIVABLE_APPS_ALL_VW.APPLIED_CUSTOMER_TRX_ID
  LEFT JOIN ORDER_TYPE ON OOHA.ORDER_TYPE_ID = ORDER_TYPE.ORDER_TYPE_ID
  LEFT JOIN EBS.OE_ORDER_SOURCES OOS ON OOHA.ORDER_SOURCE_ID = OOS.ORDER_SOURCE_ID
  LEFT JOIN LINE_ORDER_DETAILS ON  BIGINT(RCTLA.CUSTOMER_TRX_ID)
  ||'~'
  ||BIGINT(RCTLA.LINE_NUMBER) = LINE_ORDER_DETAILS.LINE_KEY
   LEFT JOIN EBS.MTL_SYSTEM_ITEMS_B MSIB_ANS_STD_UOM ON  CASE
          WHEN RCTLA.LINE_TYPE = 'LINE' THEN RCTLA.INVENTORY_ITEM_ID
          ELSE RCTLA1.INVENTORY_ITEM_ID
        END = MSIB_ANS_STD_UOM.Inventory_item_id and MSIB_ANS_STD_UOM.Organization_id = '124'
WHERE
  (
    RCTLA.INTERFACE_LINE_CONTEXT IN (
      'ORDER ENTRY',
      'INTERCOMPANY',
      'INVOICE_CONVERSION',
      'CR_AR_ADJ_CONVERSION',
      'DR_AR_ADJ_CONVERSION',
      'GLOBAL_PROCUREMENT',
      'MICROFLEX_INVOICE_CONVERSION',
      'RINGER_INVOICE_CONVERSION',
      'CR_MEMO_CONVERSION'
    )
    OR RCTLA.INTERFACE_LINE_CONTEXT IS NULL
  )
""")

# COMMAND ----------

columns = list(schema.keys())

# COMMAND ----------

file_name = get_file_name(table_name, 'dlt')
target_file = get_file_path(temp_folder, file_name, target_container, target_storage)

main.write.format('delta').mode('overwrite').option('overwriteSchema', 'true').save(target_file)

main_tempDF = spark.read.format('delta').load(target_file)

# COMMAND ----------

main = remove_duplicate_rows(df = main_tempDF, 
                             key_columns = ['invoiceDetailId'], 
                             tableName = table_name, 
                             sourceName = source_name, 
                             notebookName = NOTEBOOK_NAME, 
                             notebookPath = NOTEBOOK_PATH)

# COMMAND ----------

# TRANSFORM DATA
main_f = (
  main
  .withColumn('orderType',f.lit('ORDER_TYPE'))
  .transform(fix_uom_conversions('primaryUomConv,caseUomConv,ansStdUomConv'))
  .transform(tg_default(source_name))
  .transform(tg_supplychain_sales_invoice_lines())
  .drop('orderType')
  .transform(apply_schema(schema))
  .transform(attach_unknown_record)
  .select(columns)
  .transform(sort_columns)
)

# COMMAND ----------

# PERSIST DATA
options = {'target_storage': target_storage, 'target_container': target_container}
merge_to_delta(main_f, table_name, target_folder, overwrite, options = options)

# COMMAND ----------

# HANDLE DELETE
full_keys_f = (
  spark.sql("""
    SELECT
      REPLACE(STRING(INT(CUSTOMER_TRX_LINE_ID)), ",", "") AS invoiceDetailId
    FROM ebs.ra_customer_trx_lines_all
    WHERE
      INTERFACE_LINE_CONTEXT IN (
        'ORDER ENTRY',
        'INTERCOMPANY',
        'INVOICE_CONVERSION',
        'CR_AR_ADJ_CONVERSION',
        'DR_AR_ADJ_CONVERSION',
        'GLOBAL_PROCUREMENT',
        'MICROFLEX_INVOICE_CONVERSION'
      )
      OR INTERFACE_LINE_CONTEXT IS NULL
  """)
  .transform(attach_source_column(source = source_name))
  .transform(attach_surrogate_key(columns = 'invoiceDetailId,_SOURCE'))
  .select('_ID')
  .transform(add_unknown_ID())
)

apply_soft_delete(full_keys_f, table_name, key_columns = '_ID')

# COMMAND ----------

# UPDATE FK
update_foreign_key(table_name, 'createdBy,_SOURCE', 'createdBy_ID', 'edm.user')
update_foreign_key(table_name, 'modifiedBy,_SOURCE', 'modifiedBy_ID', 'edm.user')

# COMMAND ----------

# UPDATE CUTOFF VALUE
if not test_run:
  cutoff_value = get_incr_col_max_value(ra_customer_trx_lines_all, 'LAST_UPDATE_DATE')
  update_cutoff_value(cutoff_value, table_name, 'ebs.ra_customer_trx_lines_all')
  update_run_datetime(run_datetime, table_name, 'ebs.ra_customer_trx_lines_all')

# COMMAND ----------

# MAGIC %run ../_SHARED/PARTIALS/1.2/footer_s_supplychain
