# Databricks notebook source
# MAGIC %run ../SHARED/bootstrap

# COMMAND ----------

# Get parameters
dbutils.widgets.text("source_folder", "","")
sourceFolder = getArgument("source_folder")
sourceFolder = '/datalake/EBS/raw_data/delta_data' if sourceFolder == '' else sourceFolder

dbutils.widgets.text("target_folder", "","")
targetFolder = getArgument("target_folder")
targetFolder = '/datalake/EBS/stage_data' if targetFolder == '' else targetFolder

dbutils.widgets.text("table_name", "","")
tableName = getArgument("table_name")
tableName = 'W_TRADE_PROMOTION_ACCRUAL_F' if tableName == '' else tableName

# COMMAND ----------

# Create paths
sourceFolderUrl = DATALAKE_ENDPOINT  + sourceFolder + '/'
targetFileUrl = DATALAKE_ENDPOINT +  targetFolder + '/' + tableName + '.par'

print(sourceFolderUrl)
print(targetFileUrl)

# COMMAND ----------

# INCREMENTAL DATASET
sourceFileUrl = sourceFolderUrl + 'apps.ozf_funds_utilized_all_b.par'
OZF_FUNDS_UTILIZED_ALL_B = spark.read.parquet(sourceFileUrl)
OZF_FUNDS_UTILIZED_ALL_B.createOrReplaceTempView("OZF_FUNDS_UTILIZED_ALL_B")

# COMMAND ----------

OFFER_DETAILS = spark.sql("""
  SELECT DISTINCT
    A.UTILIZATION_ID,
    D.OFFER_CODE
  FROM OZF_CLAIM_LINES_UTIL_ALL A 
  LEFT OUTER JOIN OZF_CLAIM_LINES_ALL B ON A.CLAIM_LINE_ID = B.CLAIM_LINE_ID
  LEFT OUTER JOIN OZF_OFFERS D ON B.ACTIVITY_ID = D.QP_LIST_HEADER_ID
  WHERE D.OFFER_CODE IS NOT NULL
""")

OFFER_DETAILS.createOrReplaceTempView("OFFER_DETAILS")
OFFER_DETAILS.cache()
OFFER_DETAILS.count()

# COMMAND ----------

W_TRADE_PROMOTION_ACCRUAL_F = spark.sql("""
  SELECT DISTINCT
    CONCAT('ACCRUAL-', COALESCE(STRING(INT(OZF_FUNDS_UTILIZED_ALL_B.UTILIZATION_ID)), '')) INTEGRATION_ID,
    DATE_FORMAT(OZF_FUNDS_UTILIZED_ALL_B.CREATION_DATE, 'yyyy-MM-dd hh:mm:ss.SSS') CREATED_ON_DT,
    DATE_FORMAT(OZF_FUNDS_UTILIZED_ALL_B.LAST_UPDATE_DATE, 'yyyy-MM-dd hh:mm:ss.SSS') CHANGED_ON_DT,
    INT(OZF_FUNDS_UTILIZED_ALL_B.CREATED_BY) CREATED_BY_ID,
    INT(OZF_FUNDS_UTILIZED_ALL_B.LAST_UPDATED_BY) CHANGED_BY_ID,
    DATE_FORMAT(CURRENT_TIMESTAMP, 'yyyy-MM-dd hh:mm:ss.SSS') INSERT_DT,
    DATE_FORMAT(CURRENT_TIMESTAMP, 'yyyy-MM-dd hh:mm:ss.SSS') UPDATE_DT,
    'EBS' AS DATASOURCE_NUM_ID,
    DATE_FORMAT(CURRENT_TIMESTAMP(), 'yyyyMMddhhmmssSSS') LOAD_BATCH_ID,
    '' BATCH_SOURCE_NAME,
    'N' DELETE_FLG,
    '' DISCOUNT_LINE_FLG,
    OZF_FUNDS_UTILIZED_ALL_B.CURRENCY_CODE DOC_CURR_CODE,
    OZF_FUNDS_ALL_TL.SHORT_NAME FUND_NAME,
    OZF_FUNDS_ALL_B.FUND_NUMBER FUND_NUMBER,
    OZF_FUNDS_ALL_B.STATUS_CODE FUND_STATUS,
    '' INVOICE_ITEM,
    OZF_FUNDS_UTILIZED_ALL_B.INVOICE_ID INVOICE_NUM,
    OZF_FUNDS_UTILIZED_ALL_B.CURRENCY_CODE LOC_CURR_CODE,
    1 LOC_EXCHANGE_RATE,
    OFFER_DETAILS.OFFER_CODE OFFER_CODE,    
    '' PURCH_ORDER_NUM,
    CAST(NULL AS INT) RETURN_FLG,
    '' SALES_ORDER_ITEM,
    '' SALES_ORDER_ITEM_DETAIL_NUM,
    '' SALES_ORDER_NUM,
    '' SALES_ORDLN_ID,
    '' SALES_UOM_CODE,
    '' STANDARD_UOM_CODE,
    CAST(NULL AS FLOAT) STANDARD_UOM_CONV_RATE,
    'ACCRUAL' TRANSACTION_TYPE,
    OZF_FUNDS_UTILIZED_ALL_B.UTILIZATION_TYPE UTILIZATION_TYPE,
    CAST(NULL AS FLOAT) DUTY,
    CAST(NULL AS FLOAT) DUTY_LE_CURR,
    CAST(NULL AS FLOAT) EARNED_DISCOUNT,
    CAST(NULL AS FLOAT) FREIGHT,
    CAST(NULL AS FLOAT) FREIGHT_LE_CURR,
    CAST(NULL AS FLOAT) INVOICED_QTY,
    CAST(NULL AS FLOAT) INVOICED_QTY_PIECES,
    CAST(NULL AS FLOAT) MARKUP,
    CAST(NULL AS FLOAT) MARKUP_LE_CURR,
    CAST(NULL AS FLOAT) NET_AMT,
    CAST(NULL AS FLOAT) STD_COST,
    CAST(NULL AS FLOAT) STD_COST_LE_CURR,
    CAST(NULL AS FLOAT) UNEARNED_DISCOUNT,
    OZF_FUNDS_UTILIZED_ALL_B.ACCTD_AMOUNT ACCTD_AMOUNT,
    OZF_FUNDS_UTILIZED_ALL_B.ACCTD_AMOUNT_REMAINING ACCTD_AMOUNT_REMAINING, 
    0 AS ACTUAL_SHIPMENT_DT_WID,
    OZF_FUNDS_UTILIZED_ALL_B.CUST_ACCOUNT_ID CUSTOMER_ACCOUNT_ID,
    INT(HCSUA_SHIP.CUST_ACCT_SITE_ID) CUSTOMER_SHIP_TO_LOC_ID,
    OZF_FUNDS_ALL_B.CATEGORY_ID FUND_CATEGORY_ID,
    0 INVENTORY_ORG_WID,
    OZF_FUNDS_UTILIZED_ALL_B.GL_DATE INVOICED_ON_DT,
    OZF_FUNDS_UTILIZED_ALL_B.ORG_ID OPERATING_UNIT_ORG_ID,
    0 ORDER_XACT_TYPE_WID,
    0 ORDERED_ON_DT_WID,
    OZF_FUNDS_UTILIZED_ALL_B.PRODUCT_ID PRODUCT_ID,
    0 SALES_ORG_WID,
    0 SCHEDULED_SHIP_DT_WID,
    0 XACT_TYPE_WID
  FROM OZF_FUNDS_ALL_B  
  INNER JOIN OZF_FUNDS_UTILIZED_ALL_B ON OZF_FUNDS_UTILIZED_ALL_B.FUND_ID = OZF_FUNDS_ALL_B.FUND_ID
  INNER JOIN OZF_FUNDS_ALL_TL ON OZF_FUNDS_ALL_TL.FUND_ID = OZF_FUNDS_ALL_B.FUND_ID
  LEFT OUTER JOIN HZ_CUST_SITE_USES_ALL HCSUA_SHIP ON OZF_FUNDS_UTILIZED_ALL_B.SHIP_TO_SITE_USE_ID = HCSUA_SHIP.SITE_USE_ID
  LEFT OUTER JOIN HZ_CUST_SITE_USES_ALL HCSUA_BILL ON OZF_FUNDS_UTILIZED_ALL_B.BILL_TO_SITE_USE_ID = HCSUA_BILL.SITE_USE_ID
  LEFT OUTER JOIN OFFER_DETAILS ON OZF_FUNDS_UTILIZED_ALL_B.UTILIZATION_ID = OFFER_DETAILS.UTILIZATION_ID
  WHERE 
    OZF_FUNDS_ALL_TL.LANGUAGE = 'US'
    AND OZF_FUNDS_UTILIZED_ALL_B.UTILIZATION_TYPE <> 'ADJUSTMENT'
""")

W_TRADE_PROMOTION_ACCRUAL_F.createOrReplaceTempView("W_TRADE_PROMOTION_ACCRUAL_F")
W_TRADE_PROMOTION_ACCRUAL_F.cache()
W_TRADE_PROMOTION_ACCRUAL_F.count()

# COMMAND ----------

count = W_TRADE_PROMOTION_ACCRUAL_F.select("INTEGRATION_ID").count()
countDistinct = W_TRADE_PROMOTION_ACCRUAL_F.select("INTEGRATION_ID").distinct().count()

print(count)
print(countDistinct)

if(count != countDistinct):
  message = 'Mismatch in count of total records ({0}) and distinct count of primary keys ({1}) in {2} '.format(count, countDistinct, tableName)
  raise Exception(message)

# COMMAND ----------

W_TRADE_PROMOTION_ACCRUAL_F.coalesce(10).write.format("parquet").mode("overwrite").save(targetFileUrl)

# COMMAND ----------

OFFER_DETAILS.unpersist()
W_TRADE_PROMOTION_ACCRUAL_F.unpersist()
