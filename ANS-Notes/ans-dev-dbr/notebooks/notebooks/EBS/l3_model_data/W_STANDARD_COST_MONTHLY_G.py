# Databricks notebook source
# MAGIC %run ../SHARED/bootstrap

# COMMAND ----------

# Get parameters
dbutils.widgets.text("source_folder", "","") 
sourceFolder = getArgument("source_folder")
sourceFolder = '/datalake/EBS/raw_data/delta_data' if sourceFolder == '' else sourceFolder

dbutils.widgets.text("target_folder", "","") 
targetFolder = getArgument("target_folder")
targetFolder = '/datalake/EBS/stage_data' if targetFolder == '' else targetFolder

dbutils.widgets.text("table_name", "","") 
tableName = getArgument("table_name")
tableName = 'W_STANDARD_COST_MONTHLY_G' if tableName == '' else tableName

# COMMAND ----------

# Create paths
sourceFolderUrl = DATALAKE_ENDPOINT  + sourceFolder + '/'
targetFileUrl = DATALAKE_ENDPOINT +  targetFolder + '/' + tableName + '.par'

print(sourceFolderUrl)
print(targetFileUrl)

# COMMAND ----------

sourceFileUrl = sourceFolderUrl + 'apps.mtl_system_items_b.par'
MTL_SYSTEM_ITEMS_B_INC = spark.read.parquet(sourceFileUrl)
MTL_SYSTEM_ITEMS_B_INC.createOrReplaceTempView('MTL_SYSTEM_ITEMS_B_INC')

sourceFileUrl = sourceFolderUrl + 'apps.gl_item_cst.par'
GL_ITEM_CST_INC = spark.read.parquet(sourceFileUrl)
GL_ITEM_CST_INC.createOrReplaceTempView('GL_ITEM_CST_INC')

# INCREMENTAL DATASET

INCREMENT_STAGE_TABLE = spark.sql("""
 SELECT  INVENTORY_ITEM_ID,ORGANIZATION_ID FROM MTL_SYSTEM_ITEMS_B_INC MTL_SYSTEM_ITEMS_B
 UNION
 SELECT  INVENTORY_ITEM_ID,ORGANIZATION_ID FROM GL_ITEM_CST_INC GL_ITEM_CST
""")

INCREMENT_STAGE_TABLE.createOrReplaceTempView("INCREMENT_STAGE_TABLE")
INCREMENT_STAGE_TABLE.cache()
INCREMENT_STAGE_TABLE.count()


# COMMAND ----------

ORG_ORGANIZATION_DEFINITIONS = spark.sql("""
  SELECT
    HOU.ORGANIZATION_ID ORGANIZATION_ID, 
    HOU.BUSINESS_GROUP_ID, 
    HOU.DATE_FROM USER_DEFINITION_ENABLE_DATE, 
    HOU.DATE_TO DISABLE_DATE, 
    MP.ORGANIZATION_CODE ORGANIZATION_CODE, 
    HOU.NAME ORGANIZATION_NAME, 
    LGR.LEDGER_ID SET_OF_BOOKS_ID,
    LGR.CHART_OF_ACCOUNTS_ID CHART_OF_ACCOUNTS_ID, 
    HOI1.ORG_INFORMATION2 INVENTORY_ENABLED_FLAG, 
    CASE
      WHEN HOI2.ORG_INFORMATION_CONTEXT = 'Accounting Information' THEN INT(HOI2.ORG_INFORMATION3)
      ELSE INT(NULL)
    END OPERATING_UNIT, 
    CASE 
      WHEN HOI2.ORG_INFORMATION_CONTEXT = 'Accounting Information' THEN INT(HOI2.ORG_INFORMATION2)
      ELSE INT(NULL)
    END LEGAL_ENTITY 
  FROM HR_ORGANIZATION_UNITS HOU
  INNER JOIN HR_ORGANIZATION_INFORMATION HOI1 ON HOU.ORGANIZATION_ID = HOI1.ORGANIZATION_ID
  INNER JOIN HR_ORGANIZATION_INFORMATION HOI2 ON HOU.ORGANIZATION_ID = HOI2.ORGANIZATION_ID
  INNER JOIN MTL_PARAMETERS MP ON HOU.ORGANIZATION_ID = MP.ORGANIZATION_ID
  INNER JOIN GL_LEDGERS LGR 
  ON LGR.LEDGER_ID = CASE
      WHEN RTRIM(TRANSLATE(HOI2.ORG_INFORMATION1,'0123456789',' ')) = '' THEN INT(HOI2.ORG_INFORMATION1)
      ELSE INT(-99999)
      END 
  WHERE  
    HOI1.ORG_INFORMATION1 = 'INV' 
    AND HOI1.ORG_INFORMATION2 = 'Y' 
    AND HOI1.ORG_INFORMATION_CONTEXT  = 'CLASS' 
    AND HOI2.ORG_INFORMATION_CONTEXT  = 'Accounting Information' 
    AND LGR.OBJECT_TYPE_CODE='L' 
    AND COALESCE(LGR.COMPLETE_FLAG,'Y')='Y'
""")

ORG_ORGANIZATION_DEFINITIONS.createOrReplaceTempView("ORG_ORGANIZATION_DEFINITIONS")
ORG_ORGANIZATION_DEFINITIONS.cache()
ORG_ORGANIZATION_DEFINITIONS.count()

# COMMAND ----------

STD_COST=spark.sql("""
  SELECT
    CM_CMPT_DTL.INVENTORY_ITEM_ID,
    CM_CMPT_DTL.ORGANIZATION_ID,
    CM_CMPT_DTL.COST_TYPE_ID,
    CM_CMPT_DTL.PERIOD_ID,
    SUM(CM_CMPT_DTL.CMPNT_COST) STD_COST
  FROM CM_CMPT_DTL
  INNER JOIN CM_CMPT_MST_B ON CM_CMPT_DTL.COST_CMPNTCLS_ID = CM_CMPT_MST_B.COST_CMPNTCLS_ID
  WHERE  
    CM_CMPT_DTL.COST_TYPE_ID = 1000
    AND CM_CMPT_MST_B.COST_CMPNTCLS_CODE NOT IN ('DUTY','DUTY-ADJ','MEDICALTAX', 'INFREIGHT','INFREIGHT-ADJ','SGA','MUPADJ','MARK UP','SGA-ADJ')
  GROUP BY 
    CM_CMPT_DTL.INVENTORY_ITEM_ID,
    CM_CMPT_DTL.ORGANIZATION_ID,
    CM_CMPT_DTL.COST_TYPE_ID,
    CM_CMPT_DTL.PERIOD_ID --STD_COST
""")

STD_COST.createOrReplaceTempView("STD_COST")
STD_COST.cache()
STD_COST.count()

# COMMAND ----------

FREIGHT_COST=spark.sql("""
  SELECT 
    CM_CMPT_DTL.INVENTORY_ITEM_ID,
    CM_CMPT_DTL.ORGANIZATION_ID,
    CM_CMPT_DTL.COST_TYPE_ID,
    CM_CMPT_DTL.PERIOD_ID,
    SUM(CM_CMPT_DTL.CMPNT_COST) FREIGHT
  FROM CM_CMPT_DTL
  INNER JOIN CM_CMPT_MST_B ON CM_CMPT_DTL.COST_CMPNTCLS_ID = CM_CMPT_MST_B.COST_CMPNTCLS_ID
  WHERE  
     CM_CMPT_DTL.COST_TYPE_ID = 1000 
     AND CM_CMPT_MST_B.COST_CMPNTCLS_CODE IN ('INFREIGHT','INFREIGHT-ADJ')
  GROUP BY 
    CM_CMPT_DTL.INVENTORY_ITEM_ID,
    CM_CMPT_DTL.ORGANIZATION_ID,
    CM_CMPT_DTL.COST_TYPE_ID,
    CM_CMPT_DTL.PERIOD_ID 
""")

FREIGHT_COST.createOrReplaceTempView("FREIGHT_COST")
FREIGHT_COST.cache()
FREIGHT_COST.count()

# COMMAND ----------

DUTY_COST = spark.sql("""
  SELECT 
    CM_CMPT_DTL.INVENTORY_ITEM_ID,
    CM_CMPT_DTL.ORGANIZATION_ID,
    CM_CMPT_DTL.COST_TYPE_ID,
    CM_CMPT_DTL.PERIOD_ID,
    SUM(CM_CMPT_DTL.CMPNT_COST) DUTY
  FROM CM_CMPT_DTL
  INNER JOIN CM_CMPT_MST_B ON CM_CMPT_DTL.COST_CMPNTCLS_ID = CM_CMPT_MST_B.COST_CMPNTCLS_ID
  WHERE
    CM_CMPT_DTL.COST_TYPE_ID = 1000
    AND CM_CMPT_MST_B.COST_CMPNTCLS_CODE IN ('DUTY','DUTY-ADJ','MEDICALTAX')
  GROUP BY 
    CM_CMPT_DTL.INVENTORY_ITEM_ID,
    CM_CMPT_DTL.ORGANIZATION_ID,
    CM_CMPT_DTL.COST_TYPE_ID,
    CM_CMPT_DTL.PERIOD_ID
""")

DUTY_COST.createOrReplaceTempView("DUTY_COST")
DUTY_COST.cache()
DUTY_COST.count()

# COMMAND ----------

MARKUP_COST = spark.sql("""
  SELECT 
    CM_CMPT_DTL.INVENTORY_ITEM_ID,
    CM_CMPT_DTL.ORGANIZATION_ID,
    CM_CMPT_DTL.COST_TYPE_ID,
    CM_CMPT_DTL.PERIOD_ID,
    SUM(CM_CMPT_DTL.CMPNT_COST) MARKUP
  FROM CM_CMPT_DTL
  INNER JOIN CM_CMPT_MST_B ON CM_CMPT_DTL.COST_CMPNTCLS_ID = CM_CMPT_MST_B.COST_CMPNTCLS_ID
  WHERE
    CM_CMPT_DTL.COST_TYPE_ID = 1000
    AND CM_CMPT_MST_B.COST_CMPNTCLS_CODE IN ('SGA','MUPADJ','MARK UP','SGA-ADJ')
  GROUP BY 
    CM_CMPT_DTL.INVENTORY_ITEM_ID,
    CM_CMPT_DTL.ORGANIZATION_ID,
    CM_CMPT_DTL.COST_TYPE_ID,
    CM_CMPT_DTL.PERIOD_ID
""")

MARKUP_COST.createOrReplaceTempView("MARKUP_COST")
MARKUP_COST.cache()
MARKUP_COST.count()

# COMMAND ----------

SET_OF_BOOKS = spark.sql("""
  SELECT 
    HR_ORGANIZATION_INFORMATION.ORGANIZATION_ID,
    HR_ALL_ORGANIZATION_UNITS.BUSINESS_GROUP_ID,
    ORG_ORGANIZATION_DEFINITIONS.ORGANIZATION_CODE,
    HR_ALL_ORGANIZATION_UNITS.NAME,
    ORG_ORGANIZATION_DEFINITIONS.SET_OF_BOOKS_ID,
    ORG_ORGANIZATION_DEFINITIONS.OPERATING_UNIT,
    ORG_ORGANIZATION_DEFINITIONS.LEGAL_ENTITY,
    OPERATING_UNIT.NAME OPERATING_UNIT_NAME,
    BUSINESS_GROUP.NAME BUSINESS_GROUP_NAME,
    GL_SETS_OF_BOOKS.CURRENCY_CODE 
  FROM HR_ALL_ORGANIZATION_UNITS 
  INNER JOIN HR_ORGANIZATION_INFORMATION ON HR_ALL_ORGANIZATION_UNITS.ORGANIZATION_ID = HR_ORGANIZATION_INFORMATION.ORGANIZATION_ID 
  LEFT OUTER JOIN ORG_ORGANIZATION_DEFINITIONS ON HR_ORGANIZATION_INFORMATION.ORGANIZATION_ID = ORG_ORGANIZATION_DEFINITIONS.ORGANIZATION_ID
  LEFT OUTER JOIN HR_ALL_ORGANIZATION_UNITS OPERATING_UNIT ON ORG_ORGANIZATION_DEFINITIONS.OPERATING_UNIT = OPERATING_UNIT.ORGANIZATION_ID
  LEFT OUTER JOIN HR_ALL_ORGANIZATION_UNITS LEGAL_ENTITY ON ORG_ORGANIZATION_DEFINITIONS.LEGAL_ENTITY = LEGAL_ENTITY.ORGANIZATION_ID
  INNER JOIN HR_ALL_ORGANIZATION_UNITS BUSINESS_GROUP ON HR_ALL_ORGANIZATION_UNITS.BUSINESS_GROUP_ID = BUSINESS_GROUP.ORGANIZATION_ID
  LEFT OUTER JOIN GL_SETS_OF_BOOKS ON ORG_ORGANIZATION_DEFINITIONS.SET_OF_BOOKS_ID = GL_SETS_OF_BOOKS.SET_OF_BOOKS_ID
  WHERE 
    HR_ORGANIZATION_INFORMATION.ORG_INFORMATION_CONTEXT = 'CLASS' 
    AND HR_ORGANIZATION_INFORMATION.ORG_INFORMATION1 = 'INV' 
""")

SET_OF_BOOKS.createOrReplaceTempView("SET_OF_BOOKS")
SET_OF_BOOKS.cache()
SET_OF_BOOKS.count()

# COMMAND ----------

W_STANDARD_COST_MONTHLY_G = spark.sql("""
  SELECT 
    CONCAT(INT(COALESCE(MSIB.INVENTORY_ITEM_ID,'')), '-', INT(COALESCE(MSIB.ORGANIZATION_ID,'')), '-', COALESCE(STRING(DATE_FORMAT(GIC.START_DATE, 'yyyyMMdd')),''), '-', COALESCE(STRING(DATE_FORMAT(GIC.END_DATE, 'yyyyMMdd')), '')) INTEGRATION_ID,
    DATE_FORMAT(GIC.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss.SSS') CREATED_ON_DT,
    DATE_FORMAT(GIC.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss.SSS') CHANGED_ON_DT,
    GIC.CREATED_BY CREATED_BY_ID,
    GIC.LAST_UPDATED_BY CHANGED_BY_ID,
    DATE_FORMAT(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss.SSS') INSERT_DT,
    DATE_FORMAT(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss.SSS') UPDATE_DT,
    'EBS' DATASOURCE_NUM_ID,
    DATE_FORMAT(CURRENT_TIMESTAMP(),'yyyyMMddHHmmssSSS') LOAD_BATCH_ID,
    MSIB.INVENTORY_ITEM_ID INVENTORY_ITEM_ID,                    
    MSIB.ORGANIZATION_ID ORGANIZATION_ID,
    MSIB.ENABLED_FLAG ENABLED_FLAG,
    'N' DELETE_FLG,
    SET_OF_BOOKS.CURRENCY_CODE CURR_CODE,
    MSIB.PRIMARY_UOM_CODE BASE_UOM_CODE,
    TO_DATE(GIC.START_DATE,'YYYY-MM-dd') START_DT,
    TO_DATE(GIC.END_DATE,'YYYY-MM-dd') END_DT,
    ROUND(NVL(STD_COST.STD_COST,0),7) STD_COST,
    ROUND(NVL(FREIGHT_COST.FREIGHT,0),7) FREIGHT,
    ROUND(NVL(DUTY_COST.DUTY,0),7) DUTY,
    ROUND(NVL(MARKUP_COST.MARKUP,0),7) MARKUP
  FROM INCREMENT_STAGE_TABLE 
  LEFT OUTER JOIN MTL_SYSTEM_ITEMS_B MSIB ON INCREMENT_STAGE_TABLE.INVENTORY_ITEM_ID = MSIB.INVENTORY_ITEM_ID AND INCREMENT_STAGE_TABLE.ORGANIZATION_ID = MSIB.ORGANIZATION_ID
  LEFT OUTER JOIN GL_ITEM_CST GIC ON MSIB.INVENTORY_ITEM_ID = GIC.INVENTORY_ITEM_ID AND MSIB.ORGANIZATION_ID = GIC.ORGANIZATION_ID
  LEFT OUTER JOIN STD_COST ON GIC.INVENTORY_ITEM_ID = STD_COST.INVENTORY_ITEM_ID AND GIC.ORGANIZATION_ID = STD_COST.ORGANIZATION_ID AND GIC.PERIOD_ID = STD_COST.PERIOD_ID
  LEFT OUTER JOIN FREIGHT_COST ON GIC.INVENTORY_ITEM_ID = FREIGHT_COST.INVENTORY_ITEM_ID AND GIC.ORGANIZATION_ID = FREIGHT_COST.ORGANIZATION_ID AND GIC.PERIOD_ID = FREIGHT_COST.PERIOD_ID
  LEFT OUTER JOIN DUTY_COST ON GIC.INVENTORY_ITEM_ID = DUTY_COST.INVENTORY_ITEM_ID AND GIC.ORGANIZATION_ID = DUTY_COST.ORGANIZATION_ID AND GIC.PERIOD_ID = DUTY_COST.PERIOD_ID
  LEFT OUTER JOIN MARKUP_COST ON GIC.INVENTORY_ITEM_ID = MARKUP_COST.INVENTORY_ITEM_ID AND GIC.ORGANIZATION_ID = MARKUP_COST.ORGANIZATION_ID AND GIC.PERIOD_ID = MARKUP_COST.PERIOD_ID
  LEFT OUTER JOIN CM_MTHD_MST CMM ON GIC.COST_TYPE_ID = CMM.COST_TYPE_ID
  LEFT OUTER JOIN SET_OF_BOOKS ON MSIB.ORGANIZATION_ID = SET_OF_BOOKS.ORGANIZATION_ID
  WHERE 
    GIC.COST_TYPE_ID = 1000 
    --AND ((SELECT PRUNEDAYS FROM COST_DIMENSION_prunedf)=0 OR (MSIB.LAST_UPDATE_DATE>= (SELECT PRUNEDATE FROM COST_DIMENSION_prunedf) OR GIC.LAST_UPDATE_DATE>=(SELECT PRUNEDATE FROM COST_DIMENSION_prunedf)))
""")
W_STANDARD_COST_MONTHLY_G.createOrReplaceTempView("W_STANDARD_COST_MONTHLY_G")
W_STANDARD_COST_MONTHLY_G.cache()
W_STANDARD_COST_MONTHLY_G.count()

# COMMAND ----------

count = W_STANDARD_COST_MONTHLY_G.select("INTEGRATION_ID").count()
countDistinct = W_STANDARD_COST_MONTHLY_G.select("INTEGRATION_ID").distinct().count()

print(count)
print(countDistinct)

if(count != countDistinct):
  message = 'Mismatch in count of total records ({0}) and distinct count of primary keys ({1}) in {2} '.format(count, countDistinct, tableName)
  raise Exception(message)

# COMMAND ----------

# write to DL staging table
W_STANDARD_COST_MONTHLY_G.coalesce(10).write.format("parquet").mode("overwrite").save(targetFileUrl)

# COMMAND ----------

INCREMENT_STAGE_TABLE.unpersist()
ORG_ORGANIZATION_DEFINITIONS.unpersist()
STD_COST.unpersist()
FREIGHT_COST.unpersist()
DUTY_COST.unpersist()
MARKUP_COST.unpersist()
SET_OF_BOOKS.unpersist()
W_STANDARD_COST_MONTHLY_G.unpersist()
