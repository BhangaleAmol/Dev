# Databricks notebook source
# MAGIC %run ../SHARED/bootstrap

# COMMAND ----------

# MAGIC %scala
# MAGIC
# MAGIC val maximumOutputRowRatio = 1000L
# MAGIC spark.conf.set("spark.databricks.queryWatchdog.enabled", true)
# MAGIC spark.conf.set("spark.databricks.queryWatchdog.outputRatioThreshold", maximumOutputRowRatio)

# COMMAND ----------

# Get parameters
dbutils.widgets.text("source_folder", "","")
sourceFolder = getArgument("source_folder")
sourceFolder = '/datalake/EBS/raw_data/delta_data' if sourceFolder == '' else sourceFolder

dbutils.widgets.text("target_folder", "","")
targetFolder = getArgument("target_folder")
targetFolder = '/datalake/EBS/stage_data' if targetFolder == '' else targetFolder

dbutils.widgets.text("table_name", "","")
tableName = getArgument("table_name")
tableName = 'W_SALES_ORDER_LINE_F' if tableName == '' else tableName

# COMMAND ----------

# Create paths
sourceFolderUrl = DATALAKE_ENDPOINT + sourceFolder + '/'
sourceFolderCsvUrl = DATALAKE_ENDPOINT + '/datalake/EBS/raw_data/domain_values/'
targetFileUrl = DATALAKE_ENDPOINT + targetFolder + '/' + tableName + '.par'

print(sourceFolderUrl)
print(sourceFolderCsvUrl)
print(targetFileUrl)

# COMMAND ----------

# INCREMENTAL DATASET

# guy 2020/06/10 : need to include incremental dataset based on unique HEADER_ID OE_ORDER_HEADERS_ALL, OE_ORDER_LINES_ALL and OE_ORDER_HOLDS_ALL from delta files 

sourceFileUrl = sourceFolderUrl + 'apps.oe_order_lines_all.par'
OE_ORDER_LINES_ALL_INC = spark.read.parquet(sourceFileUrl)
OE_ORDER_LINES_ALL_INC.createOrReplaceTempView("OE_ORDER_LINES_ALL_INC")

sourceFileUrl = sourceFolderUrl + 'apps.oe_order_headers_all.par'
OE_ORDER_HEADERS_ALL_INC = spark.read.parquet(sourceFileUrl)
OE_ORDER_HEADERS_ALL_INC.createOrReplaceTempView("OE_ORDER_HEADERS_ALL_INC")

sourceFileUrl = sourceFolderUrl + 'apps.oe_order_holds_all.par'
OE_ORDER_HOLDS_ALL_INC = spark.read.parquet(sourceFileUrl)
OE_ORDER_HOLDS_ALL_INC.createOrReplaceTempView("OE_ORDER_HOLDS_ALL_INC")

INCREMENT_STAGE_TABLE = spark.sql("""
 SELECT HEADER_ID FROM OE_ORDER_LINES_ALL_INC
 UNION
 SELECT HEADER_ID FROM OE_ORDER_HEADERS_ALL_INC
 UNION 
 SELECT HEADER_ID FROM OE_ORDER_HOLDS_ALL_INC
""")

INCREMENT_STAGE_TABLE.createOrReplaceTempView("INCREMENT_STAGE_TABLE")
INCREMENT_STAGE_TABLE.cache()
INCREMENT_STAGE_TABLE.count()

# CSV  guy 2020/06/16 : this is redundant
#sourceFileUrl = sourceFolderCsvUrl + 'LKP_INTRANSIT.csv'
#LKP_INTRANSIT = spark.read.option("header", "true").csv(sourceFileUrl)
#LKP_INTRANSIT.createOrReplaceTempView("LKP_INTRANSIT")

# COMMAND ----------

LKP_DELIVERY_NOTES = spark.sql("""
  SELECT 
    STRING(LINE_ID) LINE_ID, 
    DELIVERY_ID,
    DELIVERY_NOTE_DT DELIVERY_DT
  FROM (
    SELECT
      LINE_ID, 
      STRING(INT(MAX(WDA.DELIVERY_ID))) DELIVERY_ID ,
      DATE_FORMAT(MAX(WDA.LAST_UPDATE_DATE), "yyyy/MM/dd") DELIVERY_NOTE_DT
    FROM
      OE_ORDER_LINES_ALL OOLA,
      WSH_DELIVERY_ASSIGNMENTS WDA,
      WSH_DELIVERY_DETAILS WDD,
      WSH_NEW_DELIVERIES WD
    WHERE
      OOLA.LINE_ID = WDD.SOURCE_LINE_ID
      AND WDD.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
      AND WDD.DELIVERY_DETAIL_ID >= 1
      AND WDA.DELIVERY_ID = WD.DELIVERY_ID
      AND WDD.SOURCE_CODE = 'OE'
      AND WDA.DELIVERY_ASSIGNMENT_ID >= 1
      AND WD.DELIVERY_ID >= 1
    GROUP BY LINE_ID
  )    
""")

LKP_DELIVERY_NOTES.createOrReplaceTempView("LKP_DELIVERY_NOTES")

# COMMAND ----------

FACT_MR = spark.sql("""
  SELECT
    DEMAND_SOURCE_LINE_ID DEMAND_SOURCE_LINE_ID,
    SUM(PRIMARY_RESERVATION_QUANTITY) RESERVATION_QUANTITY
  FROM MTL_RESERVATIONS  
  GROUP BY DEMAND_SOURCE_LINE_ID
""")

FACT_MR.createOrReplaceTempView("FACT_MR")

# COMMAND ----------

X944_RECEIVED_DATE= spark.sql("""
  SELECT 
    MAX(x944.creation_date) RECEIVED_DATE,
    x944.shipment_num,
    x944.customer_num,
    x944.org_id 
  FROM XX_PO_RECEIPT_STG x944
  WHERE
    x944.receipt_source_code = 'CUSTOMER'
    AND x944.record_type = 'H' 
  GROUP BY 
    x944.shipment_num, 
    x944.customer_num,
    x944.org_id
""")

X944_RECEIVED_DATE.createOrReplaceTempView("X944_RECEIVED_DATE")

# COMMAND ----------

X943_SENT_DATE = spark.sql("""
  SELECT 
    MIN(x943.creation_date) SENT_DATE,
    x943.ship_from_accnum,
    x943.order_header_id,
    x943.ORG_ID
  FROM XX_RETURN_ORDER_DETAILS_INT x943
  WHERE  
    x943.so_number = x943.delivery_id
    AND x943.delivery_id = x943.so_number
    AND x943.ln_identifier_code = 'H'
    AND x943.order_type = 'RM' 
  GROUP BY 
    x943.ship_from_accnum,
    x943.order_header_id,
    x943.ORG_ID
""")

X943_SENT_DATE.createOrReplaceTempView("X943_SENT_DATE")

# COMMAND ----------

DELIVERIES = spark.sql("""
  SELECT 
    SOURCE_LINE_ID,
    SOURCE_HEADER_ID,
    MAX(X_SHIPDATE_945) SHIPDATE_945
  FROM (
    SELECT 
      DISTINCT SOURCE_LINE_ID,
      source_HEADER_ID,
      X_SHIPDATE_945
    FROM (
      SELECT
        WSH_DELIVERY_DETAILS.SOURCE_LINE_ID SOURCE_LINE_ID,
        WSH_DELIVERY_DETAILS.SOURCE_HEADER_ID SOURCE_HEADER_ID,
        (
          SELECT 
            MAX(wms.SHIPDATE) 
          FROM XX_SO_DELIVERY_LOAD_WMSDETAILS WMS
          WHERE 
            wms.deliveryid = wda.delivery_id
            AND WMS.DELIVERYID >= 1
        ) X_SHIPDATE_945
      FROM 
        WSH_DELIVERY_DETAILS,
        WSH_DELIVERY_ASSIGNMENTS WDA
      WHERE 
        WSH_DELIVERY_DETAILS.SOURCE_CODE = 'OE'
        AND WSH_DELIVERY_DETAILS.OE_INTERFACED_FLAG = 'Y'
        AND WSH_DELIVERY_DETAILS.DELIVERY_DETAIL_ID >= 1
        AND WSH_DELIVERY_DETAILS.DELIVERY_DETAIL_ID = WDA.DELIVERY_DETAIL_ID
        AND WDA.DELIVERY_ASSIGNMENT_ID >= 1
    )
  )
  GROUP BY
    SOURCE_LINE_ID,
    source_HEADER_ID
""").distinct()

DELIVERIES.createOrReplaceTempView("DELIVERIES")

# COMMAND ----------

LKP_CUSTOMER_LOCATION_USE = spark.sql("""
  SELECT 
    HZ_CUST_SITE_USES_ALL.SITE_USE_ID, 
    HZ_CUST_SITE_USES_ALL.LAST_UPDATE_DATE LAST_UPDATE_DATE1, 
    HZ_CUST_SITE_USES_ALL.LAST_UPDATED_BY, 
    HZ_CUST_SITE_USES_ALL.CREATION_DATE, 
    HZ_CUST_SITE_USES_ALL.CREATED_BY, 
    HZ_CUST_ACCOUNTS.CUST_ACCOUNT_ID, 
    HZ_CUST_SITE_USES_ALL.SITE_USE_CODE, 
    HZ_CUST_SITE_USES_ALL.LOCATION, 
    HZ_LOCATIONS.LOCATION_ID, 
    HZ_CUST_ACCT_SITES_ALL.CUST_ACCT_SITE_ID, 
    HZ_PARTY_SITES.PARTY_SITE_ID,
    HZ_CUST_ACCT_SITES_ALL.LAST_UPDATE_DATE LAST_UPDATE_DATE2,
    HZ_CUST_SITE_USES_ALL.STATUS, 
    HZ_CUST_SITE_USES_ALL.TERRITORY_ID
  FROM
    HZ_CUST_ACCT_SITES_ALL, 
    HZ_PARTY_SITES, 
    HZ_LOCATIONS, 
    HZ_CUST_ACCOUNTS, 
    HZ_CUST_SITE_USES_ALL 
  WHERE
    HZ_CUST_SITE_USES_ALL.CUST_ACCT_SITE_ID = HZ_CUST_ACCT_SITES_ALL.CUST_ACCT_SITE_ID 
    AND HZ_CUST_ACCT_SITES_ALL.PARTY_SITE_ID = HZ_PARTY_SITES.PARTY_SITE_ID
    AND HZ_PARTY_SITES.LOCATION_ID = HZ_LOCATIONS.LOCATION_ID
    AND HZ_CUST_ACCOUNTS.CUST_ACCOUNT_ID = HZ_CUST_ACCT_SITES_ALL.CUST_ACCOUNT_ID
""")

LKP_CUSTOMER_LOCATION_USE.createOrReplaceTempView("LKP_CUSTOMER_LOCATION_USE")

# COMMAND ----------

LKP_OE_ORDER_LINES_HOLDS_ALL = spark.sql("""
  SELECT
    OE_ORDER_LINES_ALL.LINE_ID AS LINE_ID,
    MAX(OE_ORDER_HOLDS_ALL.LAST_UPDATE_DATE) HOLD_LAST_UPDATE_DATE,
    MAX(OE_HOLD_SOURCES_ALL.LAST_UPDATE_DATE) HOLD_SRC_LAST_UPDATE_DATE,
    MAX(OE_HOLD_DEFINITIONS.LAST_UPDATE_DATE) HOLD_DEFN_LAST_UPDATE_DATE
  FROM
    INCREMENT_STAGE_TABLE,
    OE_ORDER_LINES_ALL,
    OE_ORDER_HOLDS_ALL,
    OE_HOLD_SOURCES_ALL,
    OE_HOLD_DEFINITIONS
  WHERE 
    INCREMENT_STAGE_TABLE.HEADER_ID = OE_ORDER_LINES_ALL.HEADER_ID
    AND OE_ORDER_LINES_ALL.HEADER_ID = OE_ORDER_HOLDS_ALL.HEADER_ID  
    AND OE_ORDER_HOLDS_ALL.HOLD_SOURCE_ID = OE_HOLD_SOURCES_ALL.HOLD_SOURCE_ID
    AND OE_HOLD_SOURCES_ALL.HOLD_ID = OE_HOLD_DEFINITIONS.HOLD_ID
    AND (OE_ORDER_HOLDS_ALL.LINE_ID IS NULL 
        OR OE_ORDER_HOLDS_ALL.LINE_ID = OE_ORDER_LINES_ALL.LINE_ID)
    AND OE_ORDER_HOLDS_ALL.HOLD_RELEASE_ID IS NULL
    AND OE_HOLD_SOURCES_ALL.HOLD_RELEASE_ID IS NULL
    AND CURRENT_TIMESTAMP() BETWEEN NVL(OE_HOLD_DEFINITIONS.START_DATE_ACTIVE, CURRENT_TIMESTAMP()) AND NVL(OE_HOLD_DEFINITIONS.END_DATE_ACTIVE, CURRENT_TIMESTAMP())
  GROUP BY 
    OE_ORDER_LINES_ALL.HEADER_ID, 
    OE_ORDER_LINES_ALL.LINE_ID 
""")

LKP_OE_ORDER_LINES_HOLDS_ALL.createOrReplaceTempView("LKP_OE_ORDER_LINES_HOLDS_ALL")

# COMMAND ----------

LKP_OE_INTRANSIT_LINES_ALL = spark.sql("""
  SELECT DISTINCT 
    OEL.LINE_ID SALES_ORDER_LINE_ID,
    PLL.NEED_BY_DATE,
    DATE_SUB(PLL.NEED_BY_DATE, POH.IN_TRANSIT_TIME) RETD,
    POH.IN_TRANSIT_TIME INTRANSIT_TIME,
    PLL.PROMISED_DATE,
    DATE_SUB(PLL.PROMISED_DATE, POH.IN_TRANSIT_TIME) CETD,
    OEL.SHIPPING_QUANTITY_UOM,
    COALESCE(POL.cancel_flag, 'N') cancel_flag
  FROM OE_DROP_SHIP_SOURCES ODS
  JOIN OE_ORDER_HEADERS_ALL OEH 
    ON ODS.HEADER_ID = OEH.HEADER_ID
  JOIN OE_ORDER_LINES_ALL_INC OEL 
    ON OEH.HEADER_ID = OEL.HEADER_ID 
      AND OEL.LINE_ID = ODS.LINE_ID
  LEFT JOIN PO_HEADERS_ALL POH 
    ON POH.PO_HEADER_ID = ODS.PO_HEADER_ID
  --LEFT JOIN LKP_INTRANSIT ON POH.SEGMENT1 = LKP_INTRANSIT.SEGMENT1
  LEFT JOIN PO_LINE_LOCATIONS_ALL PLL ON PLL.LINE_LOCATION_ID = ODS.LINE_LOCATION_ID
  JOIN PO_LINES_ALL POL ON PLL.PO_LINE_ID = POL.PO_LINE_ID
  WHERE 
    OEL.SOURCE_TYPE_CODE = 'EXTERNAL'
    AND COALESCE(POL.cancel_flag, 'N') != 'Y'
    AND POH.PO_HEADER_ID IS NOT NULL
""")

LKP_OE_INTRANSIT_LINES_ALL.createOrReplaceTempView("LKP_OE_INTRANSIT_LINES_ALL")

# COMMAND ----------

LKP_OE_ORDER_HEADER_HOLDS_ALL = spark.sql("""
  SELECT
    OE_ORDER_HEADERS_ALL.HEADER_ID AS HEADER_ID,
    MAX(OE_ORDER_HOLDS_ALL.LAST_UPDATE_DATE) HOLD_LAST_UPDATE_DATE,
    MAX(OE_HOLD_SOURCES_ALL.LAST_UPDATE_DATE) HOLD_SRC_LAST_UPDATE_DATE,
    MAX(OE_HOLD_DEFINITIONS.LAST_UPDATE_DATE) HOLD_DEFN_LAST_UPDATE_DATE
  FROM 
    OE_ORDER_HEADERS_ALL
    INNER JOIN OE_ORDER_HOLDS_ALL 
      ON OE_ORDER_HEADERS_ALL.HEADER_ID = OE_ORDER_HOLDS_ALL.HEADER_ID  
    INNER JOIN OE_HOLD_SOURCES_ALL ON 
      OE_ORDER_HOLDS_ALL.ORG_ID = OE_HOLD_SOURCES_ALL.ORG_ID 
        AND OE_ORDER_HOLDS_ALL.HOLD_SOURCE_ID = OE_HOLD_SOURCES_ALL.HOLD_SOURCE_ID
    INNER JOIN OE_HOLD_DEFINITIONS ON OE_HOLD_SOURCES_ALL.HOLD_ID = OE_HOLD_DEFINITIONS.HOLD_ID
  WHERE OE_ORDER_HOLDS_ALL.HOLD_RELEASE_ID IS NULL
    AND OE_HOLD_SOURCES_ALL.HOLD_RELEASE_ID IS NULL
    AND OE_ORDER_HOLDS_ALL.LINE_ID IS NULL
    AND CURRENT_DATE BETWEEN NVL(OE_HOLD_DEFINITIONS.START_DATE_ACTIVE, CURRENT_DATE) AND NVL(OE_HOLD_DEFINITIONS.END_DATE_ACTIVE, CURRENT_DATE)
  GROUP BY
    OE_ORDER_HEADERS_ALL.HEADER_ID
""")

LKP_OE_ORDER_HEADER_HOLDS_ALL.createOrReplaceTempView("LKP_OE_ORDER_HEADER_HOLDS_ALL")

# COMMAND ----------

CT_HOLD_TYPE = spark.sql("""
  SELECT 
    OE_HOLD_DEFINITIONS.NAME,
    OE_ORDER_HOLDS_ALL.header_id,
    OE_ORDER_HOLDS_ALL.LINE_ID,
    ROW_NUMBER() OVER(
      PARTITION BY 
        OE_ORDER_HOLDS_ALL.header_id,
        OE_ORDER_HOLDS_ALL.LINE_ID
      ORDER BY OE_ORDER_HOLDS_ALL.Last_update_date DESC
    ) Row_Num
  FROM OE_ORDER_HOLDS_ALL
  INNER JOIN OE_HOLD_SOURCES_ALL 
    ON OE_ORDER_HOLDS_ALL.HOLD_SOURCE_ID = OE_HOLD_SOURCES_ALL.HOLD_SOURCE_ID
  INNER JOIN OE_HOLD_DEFINITIONS 
    ON OE_HOLD_SOURCES_ALL.HOLD_ID = OE_HOLD_DEFINITIONS.HOLD_ID
  WHERE OE_ORDER_HOLDS_ALL.RELEASED_FLAG = 'N'
""")

CT_HOLD_TYPE.createOrReplaceTempView("CT_HOLD_TYPE")

# COMMAND ----------

CT_SHIPMENT_PRIORITY = spark.sql("""
  SELECT 
    FND_LOOKUP_VALUES.MEANING,
    FND_LOOKUP_VALUES.LOOKUP_CODE,
    ROW_NUMBER() OVER(PARTITION BY FND_LOOKUP_VALUES.LOOKUP_CODE ORDER BY FND_LOOKUP_VALUES.Last_update_date DESC) Row_Num
  FROM FND_LOOKUP_VALUES
  WHERE 
    LOOKUP_TYPE = 'SHIPMENT_PRIORITY'
    AND LANGUAGE = 'US'
""")

CT_SHIPMENT_PRIORITY.createOrReplaceTempView("CT_SHIPMENT_PRIORITY")

# COMMAND ----------

CT_HEADER_ID = spark.sql("""
  SELECT 
    OE_HOLD_DEFINITIONS.NAME,
    OE_ORDER_HOLDS_ALL.header_id,
    OE_ORDER_HOLDS_ALL.LINE_ID,
    ROW_NUMBER() OVER(PARTITION BY OE_ORDER_HOLDS_ALL.header_id, OE_ORDER_HOLDS_ALL.LINE_ID ORDER BY OE_ORDER_HOLDS_ALL.Last_update_date DESC) Row_Num
  FROM OE_ORDER_HOLDS_ALL
  INNER JOIN OE_HOLD_SOURCES_ALL ON OE_ORDER_HOLDS_ALL.HOLD_SOURCE_ID = OE_HOLD_SOURCES_ALL.HOLD_SOURCE_ID 
  AND OE_ORDER_HOLDS_ALL.ORG_ID = OE_HOLD_SOURCES_ALL.ORG_ID  
  INNER JOIN OE_HOLD_DEFINITIONS ON OE_HOLD_SOURCES_ALL.HOLD_ID = OE_HOLD_DEFINITIONS.HOLD_ID
  WHERE 
    OE_ORDER_HOLDS_ALL.RELEASED_FLAG = 'N' 
    AND OE_ORDER_HOLDS_ALL.LINE_ID IS NULL
""")

CT_HEADER_ID.createOrReplaceTempView("CT_HEADER_ID")

# COMMAND ----------

LKP_RETURN_REASON = spark.sql("""
  SELECT 
    OE_ORDER_LINES_HISTORY.LINE_ID,    
    CONCAT_WS(', ', COLLECT_LIST(OE_REASONS.REASON_CODE)) REASON_CODE,
    MAX(OE_ORDER_LINES_HISTORY.LAST_UPDATE_DATE) LAST_UPDATE_DATE
  FROM 
    OE_ORDER_LINES_HISTORY,
    OE_REASONS,
    FND_LOOKUP_VALUES
  WHERE 
    OE_ORDER_LINES_HISTORY.REASON_ID = OE_REASONS.REASON_ID
    AND FND_LOOKUP_VALUES.LOOKUP_CODE = OE_REASONS.REASON_CODE
    AND LOOKUP_TYPE = 'CANCEL_CODE' 
    AND LANGUAGE = 'US'    
  GROUP BY
    OE_ORDER_LINES_HISTORY.LINE_ID
""")

LKP_RETURN_REASON.createOrReplaceTempView("LKP_RETURN_REASON")

# COMMAND ----------

#UOM_CONVERSION_ITEM = spark.sql("""
#  SELECT INVENTORY_ITEM_ID, UOM_CODE, CONVERSION_RATE FROM MTL_UOM_CONVERSIONS
#    WHERE INVENTORY_ITEM_ID <> 0
#    AND (DISABLE_DATE IS NULL OR DISABLE_DATE > CURRENT_DATE)
#""")
#
#UOM_CONVERSION_ITEM.createOrReplaceTempView("UOM_CONVERSION_ITEM")
#UOM_CONVERSION_ITEM.cache()
#UOM_CONVERSION_ITEM.count()
#
#
#UOM_CONVERSION_DEFAULT = spark.sql("""
#  SELECT UOM_CODE, CONVERSION_RATE FROM MTL_UOM_CONVERSIONS
#    WHERE INVENTORY_ITEM_ID = 0
#    AND (DISABLE_DATE IS NULL OR DISABLE_DATE > CURRENT_DATE)
#""")
#
#UOM_CONVERSION_DEFAULT.createOrReplaceTempView("UOM_CONVERSION_DEFAULT")
#UOM_CONVERSION_DEFAULT.cache()
#UOM_CONVERSION_DEFAULT.count()

# COMMAND ----------

#QP_LIST_LINES_V = spark.sql('''
#SELECT
#    LIST_LINE_ID,
#    CREATION_DATE,
#    LIST_HEADER_ID,
#    PRODUCT_ATTRIBUTE_CONTEXT,
#    END_DATE_ACTIVE,
#    LIST_LINE_TYPE_CODE,
#    OPERAND,
#    PRICING_PHASE_ID,
#    PRODUCT_ID,
#    PRICING_ATTRIBUTE_ID,
#    PRODUCT_ATTRIBUTE,
#    START_DATE_ACTIVE,
#    C1_PRICING_ATTRIBUTE_ID,
#    C2_PRICING_ATTRIBUTE_ID,
#    C3_LIST_LINE_ID
#FROM
#    (
#        SELECT
#            QPLL.LIST_LINE_ID    LIST_LINE_ID,
#            QPLL.CREATION_DATE   CREATION_DATE,
#            QPLL.LIST_HEADER_ID,
#            QPPR.PRODUCT_ATTRIBUTE_CONTEXT,
#            QPLL.END_DATE_ACTIVE,
#            QPLL.LIST_LINE_TYPE_CODE,
#            QPLL.OPERAND,
#            QPLL.PRICING_PHASE_ID,
#            QPPR.PRICING_ATTRIBUTE_ID,
#            QPPR.PRODUCT_ATTRIBUTE,
#            CASE
#                WHEN UPPER(QPPR.PRODUCT_ATTR_VALUE) = 'ALL' THEN NULL
#                ELSE QPPR.PRODUCT_ATTR_VALUE
#            END PRODUCT_ID,
#            QPLL.START_DATE_ACTIVE,
#            (
#                SELECT
#                    MAX(PRICING_ATTRIBUTE_ID)
#                FROM
#                    QP_PRICING_ATTRIBUTES
#                WHERE
#                    QPPR.LIST_LINE_ID = LIST_LINE_ID
#                    AND PRICING_ATTRIBUTE_CONTEXT = 'PRICING ATTRIBUTE'
#                    AND PRICING_ATTRIBUTE = 'PRICING_ATTRIBUTE11'
#            ) C1_PRICING_ATTRIBUTE_ID,
#            (
#                SELECT
#                    MAX(PRICING_ATTRIBUTE_ID)
#                FROM
#                    QP_PRICING_ATTRIBUTES
#                WHERE
#                    QPPR.LIST_LINE_ID = LIST_LINE_ID
#                    AND PRICING_ATTRIBUTE_CONTEXT IS NULL
#                    AND PRICING_ATTRIBUTE IS NULL
#                    AND EXCLUDER_FLAG = 'N'
#            ) C2_PRICING_ATTRIBUTE_ID,
#            (
#                SELECT
#                    MAX(QP_PRICING_ATTRIBUTES.LIST_LINE_ID) LIST_LINE_ID
#                FROM
#                    QP_PRICING_ATTRIBUTES
#                WHERE
#                    QPPR.LIST_LINE_ID = LIST_LINE_ID
#                    AND PRICING_ATTRIBUTE_CONTEXT = 'PRICING ATTRIBUTE'
#                    AND PRICING_ATTRIBUTE = 'PRICING_ATTRIBUTE11'
#            ) C3_LIST_LINE_ID
#        FROM
#            QP_LIST_LINES QPLL,
#            QP_PRICING_ATTRIBUTES QPPR
#        WHERE
#            QPPR.LIST_LINE_ID = QPLL.LIST_LINE_ID
#            AND QPLL.LIST_LINE_TYPE_CODE IN (
#                'PLL',
#                'PBH'
#            )
#            AND QPPR.PRICING_PHASE_ID = 1
#            AND QPPR.QUALIFICATION_IND IN (
#                4,
#                6,
#                20,
#                22
#            )
#            AND QPLL.PRICING_PHASE_ID = 1
#            AND QPLL.QUALIFICATION_IND IN (
#                4,
#                6,
#                20,
#                22
#            )
#            AND QPPR.LIST_HEADER_ID = QPLL.LIST_HEADER_ID
#    ) Q1
#WHERE
#    Q1.PRICING_ATTRIBUTE_ID = C1_PRICING_ATTRIBUTE_ID
#    OR ( Q1.PRICING_ATTRIBUTE_ID = C2_PRICING_ATTRIBUTE_ID
#         AND C3_LIST_LINE_ID IS NULL )
#''')
#
#QP_LIST_LINES_V.createOrReplaceTempView("QP_LIST_LINES_V")
##QP_LIST_LINES_V.cache()
#QP_LIST_LINES_V.persist(StorageLevel.DISK_ONLY)
#QP_LIST_LINES_V.count()

# COMMAND ----------

#PRIOR_PRICE = spark.sql("""
#SELECT
#    LIST_HEADER_ID,
#    INVENTORY_ITEM_ID,
#    START_DATE_ACTIVE,
#    END_DATE_ACTIVE,
#    PRICE_LIST_NAME,
#    OLD_PRICE,
#    PRODUCT_UOM_CODE,
#    LIST_LINE_ID
#FROM
#    (
#        SELECT
#            LIST_HEADER_ID,
#            INVENTORY_ITEM_ID,
#            START_DATE_ACTIVE,
#            END_DATE_ACTIVE,
#            PRICE_LIST_NAME,
#            OLD_PRICE,
#            PRODUCT_UOM_CODE,
#            LIST_LINE_ID,
#            ROW_NUMBER() OVER(
#                PARTITION BY LIST_HEADER_ID, INVENTORY_ITEM_ID
#                ORDER BY
#                    END_DATE_ACTIVE DESC
#            ) SEQN,
#            LEVEL
#        FROM
## price list based on item number
#            (
#                SELECT
#                    QPLH.LIST_HEADER_ID,
#                    MTL.INVENTORY_ITEM_ID,
#                    QPLL.START_DATE_ACTIVE,
#                    QPLL.END_DATE_ACTIVE,
#                    QPLTL.NAME     PRICE_LIST_NAME,
#    #ROW_NUMBER() OVER (PARTITION BY QPLH.LIST_HEADER_ID, MTL.INVENTORY_ITEM_ID INVENTORY_ITEM_ID SEQN,
#                    QPLL.OPERAND   OLD_PRICE,
#                   --
#                                                --                                                                apps.xx_order_item_demand_pkg.uom_conv 
#                                                --                                                               (ool.order_quantity_uom,
#                                                --                                                               qppr.product_uom_code,
#                                                --                                                               mtl.inventory_item_id) )old_price   
#                    QPPR.PRODUCT_UOM_CODE,
#                    QPLL.LIST_LINE_ID,
#                    'ITEM' LEVEL
#                FROM
#                    QP_LIST_HEADERS_B QPLH,
#                    QP_LIST_LINES QPLL,
#                    QP_PRICING_ATTRIBUTES QPPR,
#                    MTL_SYSTEM_ITEMS_B MTL,
#                    QP_LIST_HEADERS_TL QPLTL
#                WHERE
#                    QPLH.LIST_HEADER_ID = QPLL.LIST_HEADER_ID
#                    AND QPLL.END_DATE_ACTIVE IS NOT NULL
#                    AND QPPR.PRODUCT_ATTRIBUTE_CONTEXT = 'ITEM'
#                    AND QPPR.LIST_LINE_ID = QPLL.LIST_LINE_ID
#                    AND INT(QPPR.PRODUCT_ATTR_VALUE) = MTL.INVENTORY_ITEM_ID
#                    AND MTL.ORGANIZATION_ID = 124
#                    AND QPLL.LIST_LINE_TYPE_CODE IN (
#                        'PLL',
#                        'PBH'
#                    )
#                    AND QPPR.PRICING_PHASE_ID = 1
#                    AND QPPR.QUALIFICATION_IND IN (
#                        4,
#                        6,
#                        20,
#                        22
#                    )
#                    AND QPLL.PRICING_PHASE_ID = 1
#                    AND QPLL.QUALIFICATION_IND IN (
#                        4,
#                        6,
#                        20,
#                        22
#                    )
#    --and a.list_header_id = ool.price_list_id
#                    AND QPLL.END_DATE_ACTIVE IS NOT NULL
#                    AND QPPR.PRODUCT_ATTR_VALUE IS NOT NULL
#                    AND QPLH.LIST_TYPE_CODE = 'PRL'
#                    AND QPLH.LIST_HEADER_ID = QPLTL.LIST_HEADER_ID
#                    AND QPLTL.LANGUAGE = 'US'
#     --   AND REGEXP_EXTRACT( QPPR.PRODUCT_ATTR_VALUE, '^[[:digit:]]+$')
#                UNION # Pricelists based on Variant
#                SELECT
#                    QLHB.LIST_HEADER_ID,
#                    MSI1.INVENTORY_ITEM_ID,
#                    QPLL.START_DATE_ACTIVE,
#                    QPLL.END_DATE_ACTIVE,
#                    QPLTL.NAME     PRICE_LIST_NAME,
#                    QPLL.OPERAND   OLD_PRICE,
#                    QPPR.PRODUCT_UOM_CODE,
#                    QPLL.LIST_LINE_ID,
#                    'VARIANT' LEVEL
#                FROM
#                    QP_LIST_HEADERS_B QLHB,
#                    QP_LIST_LINES_V QPLL,
#                    QP_PRICING_ATTRIBUTES QPPR,
#                    MTL_ITEM_CATEGORIES MIC,
#                    MTL_SYSTEM_ITEMS_B MSI1,
#                    QP_LIST_HEADERS_TL QPLTL
#                WHERE
#                    1 = 1
#                    AND QPLL.LIST_HEADER_ID = QLHB.LIST_HEADER_ID
#                    AND QPLL.LIST_HEADER_ID = QPLTL.LIST_HEADER_ID
#                    AND QPLTL.LANGUAGE = 'US'
#                    AND UPPER(QLHB.ACTIVE_FLAG) = 'Y'
#                    AND UPPER(QLHB.ACTIVE_FLAG) = 'Y'
#                    AND QLHB.LIST_TYPE_CODE = 'PRL'
#                    AND QPLL.PRODUCT_ATTRIBUTE_CONTEXT = QPPR.PRODUCT_ATTRIBUTE_CONTEXT
#                    AND QPPR.LIST_LINE_ID = QPLL.LIST_LINE_ID
#                    AND QPPR.PRICING_PHASE_ID = QPLL.PRICING_PHASE_ID
#                    AND QPLL.PRODUCT_ATTRIBUTE = QPPR.PRODUCT_ATTRIBUTE
#                    AND QPPR.PRODUCT_ATTRIBUTE_CONTEXT = 'ITEM'
#                    AND QLHB.LIST_HEADER_ID = QPPR.LIST_HEADER_ID
#                    AND QPLL.PRODUCT_ID = MIC.CATEGORY_ID
#--    AND MIC.INVENTORY_ITEM_ID = MSI1.INVENTORY_ITEM_ID
#                    AND MIC.ORGANIZATION_ID = 124
#                    AND QPLL.END_DATE_ACTIVE IS NOT NULL
#                    AND QLHB.LIST_TYPE_CODE = 'PRL'
#                    AND QPLL.PRODUCT_ATTRIBUTE_CONTEXT = QPPR.PRODUCT_ATTRIBUTE_CONTEXT
#                    AND QPPR.LIST_LINE_ID = QPLL.LIST_LINE_ID
#                    AND QPPR.PRICING_PHASE_ID = QPLL.PRICING_PHASE_ID
#                    AND QPLL.PRODUCT_ATTRIBUTE = QPPR.PRODUCT_ATTRIBUTE
#                    AND QPPR.PRODUCT_ATTRIBUTE_CONTEXT = 'ITEM'
#                    AND QLHB.LIST_HEADER_ID = QPPR.LIST_HEADER_ID
#                    AND QPLL.PRODUCT_ID = MIC.CATEGORY_ID
#                    AND MIC.INVENTORY_ITEM_ID = MSI1.INVENTORY_ITEM_ID
#                    AND MIC.ORGANIZATION_ID = 124
#                    AND QPLL.END_DATE_ACTIVE IS NOT NULL
#                    AND MIC.ORGANIZATION_ID = MSI1.ORGANIZATION_ID
#                    AND MIC.ORGANIZATION_ID = 124
#                    AND (QPPR.PRICING_ATTRIBUTE_ID = C1_PRICING_ATTRIBUTE_ID
#                        OR ( QPPR.PRICING_ATTRIBUTE_ID = C2_PRICING_ATTRIBUTE_ID
#                             AND C3_LIST_LINE_ID IS NULL ))
#--  --  AND REGEXP_EXTRACT( QPLL.PRODUCT_ID, '^[[:digit:]]+$')
#            )
#    )
#WHERE
#    1 = 1
#    AND SEQN = 1
#  """)
#PRIOR_PRICE.createOrReplaceTempView("PRIOR_PRICE")
#PRIOR_PRICE.persist(StorageLevel.DISK_ONLY)
#PRIOR_PRICE.count()

# COMMAND ----------

W_SALES_ORDER_LINE_F = spark.sql("""
  SELECT 
    INT(OOLA.LINE_ID) INTEGRATION_ID,
    DATE_FORMAT(OOLA.CREATION_DATE,'yyyy-MM-dd HH:mm:ss.SSS') CREATED_ON_DT,
    DATE_FORMAT(OOLA.LAST_UPDATE_DATE,'yyyy-MM-dd HH:mm:ss.SSS') CHANGED_ON_DT,
    INT(OOLA.CREATED_BY) CREATED_BY_ID,
    INT(OOLA.LAST_UPDATED_BY) CHANGED_BY_ID,
    DATE_FORMAT(CURRENT_TIMESTAMP,'yyyy-MM-dd HH:mm:ss.SSS') INSERT_DT,  
    DATE_FORMAT(CURRENT_TIMESTAMP,'yyyy-MM-dd HH:mm:ss.SSS') UPDATE_DT,
    'EBS' DATASOURCE_NUM_ID,
    DATE_FORMAT(CURRENT_TIMESTAMP(),'yyyyMMddHHmmssSSS') LOAD_BATCH_ID,
    ''  BATCH_SOURCE_NAME,
    OOLA.CANCELLED_FLAG CANCELLED_FLG,
    'N' DELETE_FLG,
    LKP_DN.DELIVERY_ID DELIVERY_NOTE_ID,
    OOHA.TRANSACTIONAL_CURR_CODE DOC_CURR_CODE,
    OOHA.FOB_POINT_CODE FOB_CODE,
    OOHA.RETURN_REASON_CODE HEADER_RETURN_REASON_CODE,    
    LKP_OILA.INTRANSIT_TIME INTRANSIT_TIME,-- DEP ON LKP_OE_INTRANSIT_LINES_ALL
    OOLA.ITEM_IDENTIFIER_TYPE ITEM_IDENTIFIER_TYPE, 
    OOLA.RETURN_REASON_CODE LINE_RETURN_REASON_CODE,         
    GSOB.CURRENCY_CODE LOC_CURR_CODE,	
    CT_HT.NAME ORDER_HOLD_TYPE,
    OOLA.ORDERED_ITEM ORDERED_ITEM,
    OOHA.CUST_PO_NUMBER  PURCH_ORDER_NUM,
    OOHA.FLOW_STATUS_CODE RMA_CURRENT_STATUS,
    OOHA.HEADER_ID SALES_ORDER_HD_ID,
    OOLA.LINE_NUMBER SALES_ORDER_ITEM,
    OOLA.SHIPMENT_NUMBER SALES_ORDER_ITEM_DETAIL_NUM,
    OOLA.LINE_ID  SALES_ORDER_LN_ID,
    STRING(INT(OOHA.ORDER_NUMBER)) SALES_ORDER_NUM,
    OOLA.ORDER_QUANTITY_UOM SALES_UOM_CODE,
    CT_SP.MEANING SHIPMENT_PRIORITY,
    LKP_OILA.SHIPPING_QUANTITY_UOM SHIPPING_QUANTITY_UOM, --dep ON LKP_OE_INTRANSIT_LINES_ALL	
    OOLA.BOOKED_FLAG BOOKED_FLG,	
    OOLA.CANCELLED_QUANTITY CANCELLED_QTY,
    CASE 
        WHEN OOLA.ORDERED_QUANTITY > 0
        THEN OOLA.ORDERED_QUANTITY * (OOLA.UNIT_LIST_PRICE - OOLA.UNIT_SELLING_PRICE)
        ELSE OOLA.CANCELLED_QUANTITY * (OOLA.UNIT_LIST_PRICE - OOLA.UNIT_SELLING_PRICE)
    END DISCOUNT_AMT,
    CASE 
        WHEN OOLA.ORDERED_QUANTITY > 0
        THEN OOLA.ORDERED_QUANTITY * (OOLA.UNIT_LIST_PRICE )
        ELSE OOLA.CANCELLED_QUANTITY * (OOLA.UNIT_LIST_PRICE )
    END LIST_AMT,
    CASE 
        WHEN OOLA.ORDERED_QUANTITY > 0
        THEN OOLA.ORDERED_QUANTITY * (OOLA.UNIT_SELLING_PRICE)
        ELSE OOLA.CANCELLED_QUANTITY * (OOLA.UNIT_SELLING_PRICE)
    END NET_AMT,
    OOLA.ORDERED_QUANTITY + OOLA.CANCELLED_QUANTITY ORDERED_QTY,
    FACT_MR.RESERVATION_QUANTITY RESERVATION_QTY,
    OOLA.ORDERED_QUANTITY SALES_QTY,
    OOLA.INVOICED_QUANTITY TOTAL_INVOICED_QTY,
    OOLA.SHIPPED_QUANTITY TOTAL_SHIPPED_QTY,
    DATE_FORMAT(OOLA.ACTUAL_SHIPMENT_DATE, "yyyyMMdd") ACTUAL_SHIPMENT_DT_WID,
    DATE_FORMAT(OOHA.BOOKED_DATE, "yyyyMMdd") BOOKED_ON_DT_WID,
    DATE_FORMAT(LKP_OILA.CETD, "yyyyMMdd") CETD_WID, -- dep ON LKP_OE_INTRANSIT_LINES_ALL
    OOLA.SOLD_TO_ORG_ID CUSTOMER_ACCOUNT_ID,
    INT(LKP_CUST1.CUST_ACCT_SITE_ID) CUSTOMER_BILL_TO_LOC_ID, --DEP ON  LKP_CUSTOMER_LOCATION_USE
    DATE_FORMAT(OOLA.REQUEST_DATE, "yyyyMMdd") CUSTOMER_REQSTD_SHIP_DT_WID,
    INT(LKP_CUST2.CUST_ACCT_SITE_ID) CUSTOMER_SHIP_TO_LOC_ID,--DEP ON  LKP_CUSTOMER_LOCATION_USE
    LKP_DN.DELIVERY_DT DELIVERY_NOTE_DATE,
    CASE 
        WHEN OOLA.CREATION_DATE IS NULL 
        THEN DATE_FORMAT(OOHA.CREATION_DATE, "yyyyMMdd") 
        ELSE DATE_FORMAT(OOLA.CREATION_DATE, "yyyyMMdd") 
    END ENTERED_ON_DT_WID,
    OOLA.SHIP_FROM_ORG_ID INVENTORY_ORG_ID,
    DATE_FORMAT(LKP_OILA.NEED_BY_DATE, "yyyyMMdd") NEED_BY_DATE_WID,
    OOLA.ORG_ID OPERATING_UNIT_ORG_ID,
    CASE 
        WHEN OOLA.LAST_ACK_DATE IS NULL
        THEN DATE_FORMAT(OOHA.LAST_ACK_DATE, "yyyyMMdd")
        ELSE
            CASE 
                WHEN OOHA.LAST_ACK_DATE < OOLA.LAST_ACK_DATE
                THEN DATE_FORMAT(OOHA.LAST_ACK_DATE, "yyyyMMdd")
                ELSE DATE_FORMAT(OOHA.LAST_ACK_DATE, "yyyyMMdd")
            END
    END ORDER_ACKNOWLEDGED_DT_WID,
    CONCAT('SALES_ORDSRC-',INT(OOHA.ORDER_SOURCE_ID)) ORDER_SOURCE_ID,
    CASE 
        WHEN OOLA.FLOW_STATUS_CODE IN ('CLOSED',  'CANCELLED', 'XX_CANCELLED_HP', 'XX_CANCELLED_PP', 'XX_CLOSED')
        THEN 'SALES_ORDER_PROCESS-'||COALESCE(OOLA.FLOW_STATUS_CODE,'')
        WHEN LKP_OOLHA.LINE_ID IS NOT NULL 
        THEN 'SALES_ORDER_PROCESS'||'-'||'BLOCKED'
        ELSE 'SALES_ORDER_PROCESS-'||COALESCE(OOLA.FLOW_STATUS_CODE,'')
    END ORDER_STATUS_ID,
    DATE_FORMAT(OOHA.ORDERED_DATE, "yyyyMMdd") ORDERED_ON_DT_WID,
    OOLA.INVENTORY_ITEM_ID PRODUCT_ID,
    DATE_FORMAT(LKP_OILA.PROMISED_DATE, "yyyyMMdd") PROMISED_DT_WID, ----DEP ON LKP_OE_INTRANSIT_LINES_ALL
    DATE_FORMAT(OOLA.PROMISE_DATE, "yyyyMMdd") PROMISED_ON_DT_WID,
    DATE_FORMAT(X994RD.RECEIVED_DATE, "yyyyMMdd") RECEIVED_DATE_944_WID,
    DATE_FORMAT(OOLA.REQUEST_DATE, "yyyyMMdd") REQUIRED_BY_DT_WID,
    DATE_FORMAT(LKP_OILA.RETD, "yyyyMMdd") RETD_WID,---DEP ON LKP_OE_INTRANSIT_LINES_ALL
    CASE 
        WHEN OOHA.FLOW_STATUS_CODE = 'CLOSED'
        THEN DATE_FORMAT(OOHA.LAST_UPDATE_DATE, "yyyyMMdd")
        ELSE NULL   
    END RMA_CLOSED_DATE_WID,
    OOLA.ORG_ID SALES_ORG_ID,
    DATE_FORMAT(OOLA.SCHEDULE_SHIP_DATE, "yyyyMMdd") SCHEDULED_SHIP_DT_WID,
    DATE_FORMAT(X943SD.SENT_DATE, "yyyyMMdd") SENT_DT_943_WID,
    DATE_FORMAT(DEL.SHIPDATE_945, "yyyyMMdd") SHIP_DT_945_WID,
    CASE 
        WHEN OOLA.SOURCE_TYPE_CODE ='INTERNAL' 
        THEN 
            CASE WHEN  OOHA.ORDER_SOURCE_ID = 10
            THEN 
                CONCAT('SALES_ORDLNS' ,
                '-' , COALESCE (OOLA.LINE_CATEGORY_CODE, ''),
                '-', COALESCE (INT(OOHA.ORDER_TYPE_ID), ''),
                '-INTERNAL-SELF SHIP')
            ELSE  
                CONCAT('SALES_ORDLNS' , 
                '-' , COALESCE (OOLA.LINE_CATEGORY_CODE, ''),
                '-' , COALESCE (INT(OOHA.ORDER_TYPE_ID), ''),
                '-EXTERNAL-SELF SHIP')
            END
        ELSE 
            CASE 
                WHEN OOHA.ORDER_SOURCE_ID = 10
                THEN 
                    CONCAT('SALES_ORDLNS' , 
                    '-' , COALESCE (OOLA.LINE_CATEGORY_CODE, ''),
                    '-' , COALESCE (INT(OOHA.ORDER_TYPE_ID), ''),
                    '-INTERNAL-DROP SHIP')
                ELSE 
                    CONCAT('SALES_ORDLNS' , 
                    '-' , COALESCE (OOLA.LINE_CATEGORY_CODE, ''),
                    '-' , COALESCE (INT(OOHA.ORDER_TYPE_ID), ''),
                    '-EXTERNAL-DROP SHIP')
            END 
    END XACT_TYPE_ID,
    DATE_FORMAT(OOHA.BOOKED_DATE, 'yyyy-MM-dd HH:mm:ss.SSS' ) BOOKED_ON_DT,
    DATE_FORMAT(OOHA.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss.SSS') HEADER_CREATED_ON_DT,
    CT_HI.NAME ORDER_HEADER_HOLD_TYPE,
    CASE 
        WHEN LKP_OOHHA.HEADER_ID IS NOT NULL 
        THEN 'SALES_ORDER_PROCESS'||'-'||'BLOCKED'
        ELSE 'SALES_ORDER_PROCESS-'||COALESCE(UPPER(OOHA.FLOW_STATUS_CODE),'')
    END                                                                      ORDER_HEADER_STATUS_ID,
    CONCAT(COALESCE(OOHA.TRANSACTIONAL_CURR_CODE,''),'-',COALESCE(GSOB.CURRENCY_CODE,''),'-Corporate-',COALESCE(DATE_FORMAT(OOHA.ORDERED_DATE, "yyyyMMdd"),'')) EXCHG_INTEGRATION_ID,
    OOLA.OPEN_FLAG OPEN_FLG,
    IF(
        OOLA.OPEN_FLAG = 'Y' 
        AND COALESCE(OOLA.CANCELLED_FLAG,OOHA.CANCELLED_FLAG)='N'  
        AND	OOLA.ORDERED_QUANTITY > 0 ,'Y','N'
    ) FIN_BACKLOG_FLG,
    IF(
        OOLA.OPEN_FLAG = 'Y' 
        AND COALESCE(OOLA.CANCELLED_FLAG,OOHA.CANCELLED_FLAG)='N' 
        AND	OOLA.SHIPPABLE_FLAG = 'Y' AND OOLA.ORDERED_QUANTITY > 0 ,'Y','N'
    ) OPR_BACKLOG_FLG,
    LKP_RR.REASON_CODE,
    IF(OOLA.SCHEDULE_STATUS_CODE = 'SCHEDULED','Y','N') SCHEDULED_FLG,
    OOLA.UNIT_LIST_PRICE CURRENT_UNIT_PRICE,
    --PRIOR_PRICE.OLD_PRICE,
    --UOM_CONVERSION_ITEM_FROM.CONVERSION_RATE,
    --UOM_CONVERSION_DEFAULT_FROM.CONVERSION_RATE,
    --UOM_CONVERSION_ITEM_TO.CONVERSION_RATE,
    --UOM_CONVERSION_DEFAULT_TO.CONVERSION_RATE,
    --NVL(UOM_CONVERSION_ITEM_TO.CONVERSION_RATE,UOM_CONVERSION_DEFAULT_TO.CONVERSION_RATE) / 
    --NVL(UOM_CONVERSION_ITEM_FROM.CONVERSION_RATE,UOM_CONVERSION_DEFAULT_FROM.CONVERSION_RATE) CONVERSION_RATE,
    --PRIOR_PRICE.OLD_PRICE *
    --         NVL(UOM_CONVERSION_ITEM_TO.CONVERSION_RATE,UOM_CONVERSION_DEFAULT_TO.CONVERSION_RATE) / 
    --         NVL(UOM_CONVERSION_ITEM_FROM.CONVERSION_RATE,UOM_CONVERSION_DEFAULT_FROM.CONVERSION_RATE) PRIOR_UNIT_PRICE--,
    '' PRIOR_UNIT_PRICE         
    --PRIOR_PRICE.PRODUCT_UOM_CODE,
    --OOLA.ORDER_QUANTITY_UOM
  FROM 
  INCREMENT_STAGE_TABLE
  INNER JOIN OE_ORDER_HEADERS_ALL OOHA
    ON INCREMENT_STAGE_TABLE.HEADER_ID = OOHA.HEADER_ID
  INNER JOIN OE_ORDER_LINES_ALL OOLA 
    ON INCREMENT_STAGE_TABLE.HEADER_ID= OOLA.HEADER_ID
  INNER JOIN HR_OPERATING_UNITS HOU 
    ON OOLA.ORG_ID = HOU.ORGANIZATION_ID
  INNER JOIN GL_SETS_OF_BOOKS GSOB 
    ON HOU.SET_OF_BOOKS_ID = GSOB.SET_OF_BOOKS_ID
  LEFT JOIN FACT_MR 
    ON OOLA.LINE_ID = FACT_MR.DEMAND_SOURCE_LINE_ID
  LEFT JOIN X944_RECEIVED_DATE X994RD 
    ON OOHA.ship_to_org_id = X994RD.customer_num 
      AND OOHA.ORG_ID =X994RD.ORG_ID 
      AND CHAR(OOHA.order_number) = X994RD.shipment_num
  LEFT JOIN X943_SENT_DATE X943SD 
    ON OOHA.ship_to_org_id = X943SD.ship_from_accnum 
      AND INT(OOHA.header_id) = X943SD.order_header_id 
      AND OOHA.ORG_ID = X943SD.ORG_ID
  LEFT JOIN DELIVERIES DEL 
    ON OOLA.LINE_ID = DEL.SOURCE_LINE_ID 
      AND OOLA.HEADER_ID= DEL.SOURCE_HEADER_ID
  LEFT JOIN LKP_DELIVERY_NOTES LKP_DN 
    ON OOLA.LINE_ID = LKP_DN.LINE_ID
  LEFT JOIN LKP_CUSTOMER_LOCATION_USE LKP_CUST1 
    ON LKP_CUST1.SITE_USE_ID = OOLA.INVOICE_TO_ORG_ID
  LEFT JOIN LKP_CUSTOMER_LOCATION_USE LKP_CUST2 
    ON LKP_CUST2.SITE_USE_ID = OOLA.SHIP_TO_ORG_ID
  LEFT JOIN LKP_OE_ORDER_LINES_HOLDS_ALL LKP_OOLHA 
    ON LKP_OOLHA.LINE_ID = OOLA.LINE_ID
  LEFT JOIN LKP_OE_INTRANSIT_LINES_ALL LKP_OILA 
    ON LKP_OILA.SALES_ORDER_LINE_ID = OOLA.LINE_ID
  LEFT JOIN LKP_OE_ORDER_HEADER_HOLDS_ALL LKP_OOHHA 
    ON OOHA.HEADER_ID = LKP_OOHHA.HEADER_ID
  LEFT JOIN CT_HOLD_TYPE CT_HT 
    ON OOLA.header_id= CT_HT.header_id 
    and OOLA.line_id = CT_HT.line_id 
    and CT_HT.Row_Num = 1
  LEFT JOIN CT_HEADER_ID CT_HI 
    ON OOHA.HEADER_ID = CT_HI.HEADER_ID 
    AND CT_HI.Row_Num =1
  LEFT JOIN CT_SHIPMENT_PRIORITY CT_SP 
    ON CT_SP.LOOKUP_CODE = OOHA.SHIPMENT_PRIORITY_CODE 
    AND CT_SP.ROW_NUM = 1
  LEFT JOIN LKP_RETURN_REASON LKP_RR
      ON LKP_RR.LINE_ID = OOLA.LINE_ID
  --LEFT JOIN PRIOR_PRICE
  --  ON OOLA.PRICE_LIST_ID = PRIOR_PRICE.LIST_HEADER_ID
  --  AND OOLA.INVENTORY_ITEM_ID = PRIOR_PRICE.INVENTORY_ITEM_ID    
  --LEFT JOIN UOM_CONVERSION_ITEM UOM_CONVERSION_ITEM_FROM
  --  ON OOLA.INVENTORY_ITEM_ID = UOM_CONVERSION_ITEM_FROM.INVENTORY_ITEM_ID
  --  AND PRIOR_PRICE.PRODUCT_UOM_CODE = UOM_CONVERSION_ITEM_FROM.UOM_CODE
  --LEFT JOIN UOM_CONVERSION_DEFAULT UOM_CONVERSION_DEFAULT_FROM
  --  ON PRIOR_PRICE.PRODUCT_UOM_CODE = UOM_CONVERSION_DEFAULT_FROM.UOM_CODE
  --LEFT JOIN UOM_CONVERSION_ITEM UOM_CONVERSION_ITEM_TO
  --  ON OOLA.INVENTORY_ITEM_ID   =  UOM_CONVERSION_ITEM_TO.INVENTORY_ITEM_ID
  --  AND OOLA.ORDER_QUANTITY_UOM = UOM_CONVERSION_ITEM_TO.UOM_CODE
  --LEFT JOIN UOM_CONVERSION_DEFAULT UOM_CONVERSION_DEFAULT_TO
  --  ON OOLA.ORDER_QUANTITY_UOM = UOM_CONVERSION_DEFAULT_TO.UOM_CODE
  WHERE OOLA.CHARGE_PERIODICITY_CODE IS NULL
  --AND OOHA.ORDER_NUMBER = '1374990'
  --and OOLA.LINE_ID = 11716875
""")

W_SALES_ORDER_LINE_F.createOrReplaceTempView("W_SALES_ORDER_LINE_F")
W_SALES_ORDER_LINE_F.cache()
W_SALES_ORDER_LINE_F.count()

# COMMAND ----------

count = W_SALES_ORDER_LINE_F.select("INTEGRATION_ID").count()
countDistinct = W_SALES_ORDER_LINE_F.select("INTEGRATION_ID").distinct().count()

print(count)
print(countDistinct)

if(count != countDistinct):
  message = 'Mismatch in count of total records ({0}) and distinct count of primary keys ({1}) in {2} '.format(count, countDistinct, tableName)
  raise Exception(message)

# COMMAND ----------

W_SALES_ORDER_LINE_F.write.format("parquet").mode("overwrite").save(targetFileUrl)

# COMMAND ----------

INCREMENT_STAGE_TABLE.unpersist()
LKP_DELIVERY_NOTES.unpersist()
FACT_MR.unpersist()
X944_RECEIVED_DATE.unpersist()
X943_SENT_DATE.unpersist()
DELIVERIES.unpersist()
LKP_CUSTOMER_LOCATION_USE.unpersist()
LKP_OE_ORDER_LINES_HOLDS_ALL.unpersist()
LKP_OE_INTRANSIT_LINES_ALL.unpersist()
LKP_OE_ORDER_HEADER_HOLDS_ALL.unpersist()
CT_HOLD_TYPE.unpersist()
CT_SHIPMENT_PRIORITY.unpersist()
CT_HEADER_ID.unpersist()
LKP_RETURN_REASON.unpersist()
UOM_CONVERSION_DEFAULT.unpersist()
QP_LIST_LINES_V.unpersist()
PRIOR_PRICE.unpersist()
W_SALES_ORDER_LINE_F.unpersist()
