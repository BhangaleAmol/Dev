# Databricks notebook source
# MAGIC %run ../SHARED/bootstrap

# COMMAND ----------

# Get parameters
dbutils.widgets.text("source_folder", "","")
sourceFolder = getArgument("source_folder")
sourceFolder = '/datalake/EBS/raw_data/delta_data' if sourceFolder == '' else sourceFolder

dbutils.widgets.text("target_folder", "","")
targetFolder = getArgument("target_folder")
targetFolder = '/datalake/EBS/stage_data' if targetFolder == '' else targetFolder

dbutils.widgets.text("table_name", "","")
tableName = getArgument("table_name")
tableName = 'W_PRODUCT_D' if tableName == '' else tableName

# COMMAND ----------

# Create paths
sourceFolderUrl = DATALAKE_ENDPOINT  + sourceFolder + '/'
targetFileUrl = DATALAKE_ENDPOINT +  targetFolder + '/' + tableName + '.par'

print(sourceFolderUrl)
print(targetFileUrl)

STG_PDH_ALL_SYS_REBRAND = spark.table('mdm.PDHSTG_STG_PDH_ALL_SYS_REBRAND')
STG_PDH_ALL_SYS_REBRAND.createOrReplaceTempView('STG_PDH_ALL_SYS_REBRAND')

# COMMAND ----------

# INCREMENTAL DATASET

# guy 2020/06/10 : need to include incremental dataset based on unique Inventory_Item_ID's for MTL_SYSTEL_ITEMS and MTL_UOM_CONVERSIONS where inventory_item_id <> 0 from delta file 

sourceFileUrl = sourceFolderUrl + 'apps.mtl_system_items_b.par'
MTL_SYSTEM_ITEMS_B_INC =spark.read.parquet(sourceFileUrl)
MTL_SYSTEM_ITEMS_B_INC.createOrReplaceTempView('MSIB')
MTL_SYSTEM_ITEMS_B_INC.count()

sourceFileUrl = sourceFolderUrl + 'apps.mtl_uom_conversions.par'
MTL_UOM_CONVERSIONS_INC =spark.read.parquet(sourceFileUrl)
MTL_UOM_CONVERSIONS_INC.createOrReplaceTempView('UOMC')

sourceFileUrl = sourceFolderUrl + 'apps.mtl_cross_references.par'
MTL_CROSS_REFERENCES =spark.read.parquet(sourceFileUrl)
MTL_CROSS_REFERENCES.createOrReplaceTempView('CROSS_REF')

# INCREMENT_STAGE_TABLE = spark.sql("""
#  SELECT  DISTINCT  INVENTORY_ITEM_ID FROM MSIB  -- need to include all org-id's
#  UNION
#  SELECT  DISTINCT INVENTORY_ITEM_ID FROM UOMC WHERE INVENTORY_ITEM_ID <> 0
#  UNION 
#  SELECT DISTINCT INVENTORY_ITEM_ID FROM CROSS_REF
# """)

INCREMENT_STAGE_TABLE = spark.sql("""
 SELECT  DISTINCT  INVENTORY_ITEM_ID FROM ebs.mtl_system_items_b  
""")

INCREMENT_STAGE_TABLE.createOrReplaceTempView("INCREMENT_STAGE_TABLE")
# INCREMENT_STAGE_TABLE.cache()
# INCREMENT_STAGE_TABLE.count()

#sourceFileUrl = sourceFolderUrl + 'MTL_SYSTEM_ITEMS_B.par'
#MTL_SYSTEM_ITEMS_B_INC =spark.read.parquet(sourceFileUrl)
#MTL_SYSTEM_ITEMS_B_INC.createOrReplaceTempView('MSIB')

# COMMAND ----------

UOM_QUERY_STRING = """
  SELECT DISTINCT 
    MSIB.INVENTORY_ITEM_ID,
    MUC1.CONVERSION_RATE CONV_RATE,
    MUC2.CONVERSION_RATE DEFAULT_RATE,
    MUC2.UOM_CODE,
    NVL(MUC1.LAST_UPDATE_DATE, MUC2.LAST_UPDATE_DATE) LAST_UPDATE_DATE
  FROM INCREMENT_STAGE_TABLE MSIB
  LEFT OUTER JOIN (
    SELECT INVENTORY_ITEM_ID, CONVERSION_RATE, LAST_UPDATE_DATE, UOM_CODE
    FROM MTL_UOM_CONVERSIONS
    WHERE DISABLE_DATE IS NULL AND UOM_CODE = '{0}'
  ) MUC1 ON MSIB.INVENTORY_ITEM_ID = MUC1.INVENTORY_ITEM_ID
  CROSS JOIN (
    SELECT 
      UOM_CODE, 
      CONVERSION_RATE, 
      DATE_FORMAT(LAST_UPDATE_DATE, "yyyy-MM-dd HH:mm:ss") LAST_UPDATE_DATE
    FROM MTL_UOM_CONVERSIONS 
    WHERE INVENTORY_ITEM_ID = 0 AND UOM_CODE = '{0}'
    LIMIT 1
  ) AS MUC2
  --WHERE MSIB.ORGANIZATION_ID = 124
"""

# COMMAND ----------

GROSS_UOM = spark.sql(UOM_QUERY_STRING.format("GR"))
GROSS_UOM.createOrReplaceTempView("GROSS_UOM")

# COMMAND ----------

PAIR_UOM = spark.sql(UOM_QUERY_STRING.format("PR"))
PAIR_UOM.createOrReplaceTempView("PAIR_UOM")

# COMMAND ----------

PIECE_UOM = spark.sql(UOM_QUERY_STRING.format("PC"))
PIECE_UOM.createOrReplaceTempView("PIECE_UOM")

# COMMAND ----------

CASE_UOM = spark.sql(UOM_QUERY_STRING.format("CA"))
CASE_UOM.createOrReplaceTempView("CASE_UOM")

# COMMAND ----------

ACASE_UOM = spark.sql(UOM_QUERY_STRING.format("CS"))
ACASE_UOM.createOrReplaceTempView("ACASE_UOM")

# COMMAND ----------

BUNDLE_UOM = spark.sql(UOM_QUERY_STRING.format("BD"))
BUNDLE_UOM.createOrReplaceTempView("BUNDLE_UOM")

# COMMAND ----------

BAG_UOM = spark.sql(UOM_QUERY_STRING.format("BG"))
BAG_UOM.createOrReplaceTempView("BAG_UOM")

# COMMAND ----------

BOX_UOM = spark.sql(UOM_QUERY_STRING.format("BX"))
BOX_UOM.createOrReplaceTempView("BOX_UOM")

# COMMAND ----------

DOZEN_UOM = spark.sql(UOM_QUERY_STRING.format("DZ"))
DOZEN_UOM.createOrReplaceTempView("DOZEN_UOM")

# COMMAND ----------

RETAIL_PACK_UOM = spark.sql(UOM_QUERY_STRING.format("RP"))
RETAIL_PACK_UOM.createOrReplaceTempView("RETAIL_PACK_UOM")

# COMMAND ----------

DISPENSER_DISPLAY_UOM = spark.sql(UOM_QUERY_STRING.format("DI"))
DISPENSER_DISPLAY_UOM.createOrReplaceTempView("DISPENSER_DISPLAY_UOM")

# COMMAND ----------

DISPLAY_DISPENSER_UOM = spark.sql(UOM_QUERY_STRING.format("DP"))
DISPLAY_DISPENSER_UOM.createOrReplaceTempView("DISPLAY_DISPENSER_UOM")

# COMMAND ----------

PACK_UOM = spark.sql(UOM_QUERY_STRING.format("PK"))
PACK_UOM.createOrReplaceTempView("PACK_UOM")

# COMMAND ----------

CARTON_UOM = spark.sql(UOM_QUERY_STRING.format("CT"))
CARTON_UOM.createOrReplaceTempView("CARTON_UOM")

# COMMAND ----------

EACH_UOM = spark.sql(UOM_QUERY_STRING.format("EA"))
EACH_UOM.createOrReplaceTempView("EACH_UOM")

# COMMAND ----------

ROLL_UOM = spark.sql(UOM_QUERY_STRING.format("RL"))
ROLL_UOM.createOrReplaceTempView("ROLL_UOM")

# COMMAND ----------

SPOOL_UOM = spark.sql(UOM_QUERY_STRING.format("SP"))
SPOOL_UOM.createOrReplaceTempView("SPOOL_UOM")

# COMMAND ----------

# DRUM_UOM = spark.sql(UOM_QUERY_STRING.format("DR"))
# DRUM_UOM.createOrReplaceTempView("DRUM_UOM")

# COMMAND ----------

KIT_UOM = spark.sql(UOM_QUERY_STRING.format("KT"))
KIT_UOM.createOrReplaceTempView("KIT_UOM")

# COMMAND ----------

ALT_PIECE_UOM = spark.sql(UOM_QUERY_STRING.format("PS"))
ALT_PIECE_UOM.createOrReplaceTempView("ALT_PIECE_UOM")

# COMMAND ----------

PRODUCT_DIMENSION_PREPARE = spark.sql("""
  SELECT 
    DATE_FORMAT(MTL_SYSTEM_ITEMS_B.CREATION_DATE,"yyyy-MM-dd HH:mm:ss.SSS") CREATED_ON_DT,
    DATE_FORMAT(MTL_SYSTEM_ITEMS_B.LAST_UPDATE_DATE,"yyyy-MM-dd HH:mm:ss.SSS") CHANGED_ON_DT,
    MTL_SYSTEM_ITEMS_B.CREATED_BY CREATED_BY_ID,
    MTL_SYSTEM_ITEMS_B.LAST_UPDATED_BY CHANGED_BY_ID,
    MTL_SYSTEM_ITEMS_B.LAST_UPDATE_DATE,
    MTL_SYSTEM_ITEMS_B.CREATION_DATE,
    MTL_SYSTEM_ITEMS_B.SEGMENT1 PART_NUM,
    MTL_SYSTEM_ITEMS_B.ATTRIBUTE15 ANS_STD_UOM,
    MTL_SYSTEM_ITEMS_B.PRIMARY_UOM_CODE,
    MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID,
    MTL_SYSTEM_ITEMS_B.DESCRIPTION ITEM_DESCRIPTION,
    NVL(MCR.CROSS_REFERENCE, 'No ASPN') LEGACY_ASPN,
    MTL_SYSTEM_ITEMS_B.PRIMARY_UOM_CODE,
    NVL(PRIME_UOM.CONVERSION_RATE,1) PRIMARY_UOM_CONV,
    MCAT.SEGMENT5 STYLE_CODE,
    ORG_LIST.RULE_LIST,
    CASE 
      WHEN GROSS_UOM.CONV_RATE IS NULL AND GROSS_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(GROSS_UOM.CONV_RATE, GROSS_UOM.DEFAULT_RATE))), 9) 
    END GROSS_CONV,
    CASE 
      WHEN PAIR_UOM.CONV_RATE IS NULL AND PAIR_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1)/(NVL(PAIR_UOM.CONV_RATE, PAIR_UOM.DEFAULT_RATE))), 9) 
    END PAIR_CONV,
    CASE
      WHEN PIECE_UOM.CONV_RATE IS NULL AND PIECE_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) /(NVL(PIECE_UOM.CONV_RATE, PIECE_UOM.DEFAULT_RATE))), 9) 
    END PIECE_CONV,
    CASE
      WHEN CASE_UOM.CONV_RATE IS NULL AND CASE_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) /(NVL(CASE_UOM.CONV_RATE, CASE_UOM.DEFAULT_RATE))), 9) 
    END CASE_CONV,
    CASE
      WHEN ACASE_UOM.CONV_RATE IS NULL AND ACASE_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) /(NVL(ACASE_UOM.CONV_RATE, ACASE_UOM.DEFAULT_RATE))), 9) 
    END ACASE_CONV,
    CASE
      WHEN BAG_UOM.CONV_RATE IS NULL AND BAG_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(BAG_UOM.CONV_RATE, BAG_UOM.DEFAULT_RATE))), 9) 
    END BAG_CONV,
    CASE
      WHEN BUNDLE_UOM.CONV_RATE IS NULL AND BUNDLE_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(BUNDLE_UOM.CONV_RATE, BUNDLE_UOM.DEFAULT_RATE))), 9) 
    END BUNDLE_CONV,
    CASE 
      WHEN BOX_UOM.CONV_RATE IS NULL AND BOX_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(BOX_UOM.CONV_RATE, BOX_UOM.DEFAULT_RATE))), 9) 
    END BOX_CONV,
    CASE
      WHEN DOZEN_UOM.CONV_RATE IS NULL AND DOZEN_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(DOZEN_UOM.CONV_RATE, DOZEN_UOM.DEFAULT_RATE))), 9) 
    END DOZEN_CONV,
    CASE
      WHEN RETAIL_PACK_UOM.CONV_RATE IS NULL AND RETAIL_PACK_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(RETAIL_PACK_UOM.CONV_RATE, RETAIL_PACK_UOM.DEFAULT_RATE))), 9) 
    END RETAIL_PACK_CONV,
    CASE 
      WHEN DISPENSER_DISPLAY_UOM.CONV_RATE IS NULL AND DISPENSER_DISPLAY_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(DISPENSER_DISPLAY_UOM.CONV_RATE, DISPENSER_DISPLAY_UOM.DEFAULT_RATE))), 9) 
    END DISPENSER_DISPLAY_CONV,
    CASE 
      WHEN DISPLAY_DISPENSER_UOM.CONV_RATE IS NULL AND DISPLAY_DISPENSER_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(DISPLAY_DISPENSER_UOM.CONV_RATE, DISPLAY_DISPENSER_UOM.DEFAULT_RATE))), 9) 
    END DISPLAY_DISPENSER_CONV,
    CASE 
      WHEN PACK_UOM.CONV_RATE IS NULL AND PACK_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(PACK_UOM.CONV_RATE, PACK_UOM.DEFAULT_RATE))), 9) 
    END PACK_CONV,
    CASE 
      WHEN CARTON_UOM.CONV_RATE IS NULL AND CARTON_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(CARTON_UOM.CONV_RATE, CARTON_UOM.DEFAULT_RATE))), 9) 
    END CARTON_CONV,
    CASE 
      WHEN EACH_UOM.CONV_RATE IS NULL AND EACH_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(EACH_UOM.CONV_RATE, EACH_UOM.DEFAULT_RATE))), 9) 
    END EACH_CONV,
    CASE 
      WHEN ROLL_UOM.CONV_RATE IS NULL AND ROLL_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(ROLL_UOM.CONV_RATE, ROLL_UOM.DEFAULT_RATE))), 9) 
    END ROLL_CONV,
    CASE 
      WHEN SPOOL_UOM.CONV_RATE IS NULL AND SPOOL_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1) / (NVL(SPOOL_UOM.CONV_RATE, SPOOL_UOM.DEFAULT_RATE))), 9) 
    END SPOOL_CONV,
    CASE 
      WHEN KIT_UOM.CONV_RATE IS NULL AND KIT_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1)/ (NVL(KIT_UOM.CONV_RATE, KIT_UOM.DEFAULT_RATE))), 9) 
    END KIT_CONV,
    CASE 
      WHEN ALT_PIECE_UOM.CONV_RATE IS NULL AND ALT_PIECE_UOM.DEFAULT_RATE IS NULL THEN 1
      ELSE ROUND((NVL(PRIME_UOM.CONVERSION_RATE,1)/ (NVL(ALT_PIECE_UOM.CONV_RATE, ALT_PIECE_UOM.DEFAULT_RATE))), 9) 
    END ALT_PIECE_CONV,
    NVL(MRPN.CROSS_REFERENCE, 'No MRPN') MRPN
  FROM INCREMENT_STAGE_TABLE
  LEFT OUTER JOIN MTL_SYSTEM_ITEMS_B
    ON INCREMENT_STAGE_TABLE.INVENTORY_ITEM_ID = MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID
  LEFT OUTER JOIN (SELECT inventory_item_id, category_id FROM MTL_ITEM_CATEGORIES WHERE CATEGORY_SET_ID = 1100000042
    and organization_id = 124) MTL_ITEM_CATEGORIES  -- 1100000045 = Pricing Category Set
    ON INCREMENT_STAGE_TABLE.INVENTORY_ITEM_ID = MTL_ITEM_CATEGORIES.INVENTORY_ITEM_ID                        -- 1100000042 = Brand Category Set
  LEFT OUTER JOIN MTL_CATEGORIES_B MCAT 
    ON MTL_ITEM_CATEGORIES.CATEGORY_ID = MCAT.CATEGORY_ID 
  LEFT OUTER JOIN (SELECT 
        INVENTORY_ITEM_ID, 
        CONCAT_WS(',', COLLECT_LIST(CROSS_REFERENCE)) CROSS_REFERENCE,
        MAX(LAST_UPDATE_DATE) LAST_UPDATE_DATE
    FROM MTL_CROSS_REFERENCES
    WHERE CROSS_REFERENCE_TYPE = 'Legacy Item Number'
      AND NVL(ORGANIZATION_ID, 124) = 124
    GROUP BY INVENTORY_ITEM_ID
  ) MCR ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = MCR.INVENTORY_ITEM_ID  -- Legacy Item Number
  LEFT OUTER JOIN (SELECT 
      INVENTORY_ITEM_ID, 
      CONCAT_WS(',', COLLECT_LIST(CROSS_REFERENCE)) CROSS_REFERENCE,
      MAX(LAST_UPDATE_DATE) LAST_UPDATE_DATE
    FROM MTL_CROSS_REFERENCES
      WHERE CROSS_REFERENCE_TYPE = 'Legacy MRPN'
      AND NVL(ORGANIZATION_ID, 124) = 124
    GROUP BY INVENTORY_ITEM_ID
  ) MRPN ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = MRPN.INVENTORY_ITEM_ID  -- MRPN Number
  LEFT OUTER JOIN (SELECT 
        INVENTORY_ITEM_ID , 
        MTL_UOM_CONVERSIONS.UOM_CODE, 
        NVL(MTL_UOM_CONVERSIONS.CONVERSION_RATE, DEFAULT_UOMS.CONVERSION_RATE) CONVERSION_RATE
        FROM
                MTL_UOM_CONVERSIONS,
                (SELECT UOM_CODE, CONVERSION_RATE 
                        FROM MTL_UOM_CONVERSIONS 
                        WHERE INVENTORY_ITEM_ID = 0) DEFAULT_UOMS
        WHERE MTL_UOM_CONVERSIONS.UOM_CODE = DEFAULT_UOMS.UOM_CODE
  ) PRIME_UOM ON 
    MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = PRIME_UOM.INVENTORY_ITEM_ID 
    AND MTL_SYSTEM_ITEMS_B.PRIMARY_UOM_CODE = PRIME_UOM.UOM_CODE
  LEFT OUTER JOIN GROSS_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = GROSS_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN PAIR_UOM  ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = PAIR_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN PIECE_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = PIECE_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN CASE_UOM  ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = CASE_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN ACASE_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = ACASE_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN BAG_UOM   ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = BAG_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN BUNDLE_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = BUNDLE_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN BOX_UOM   ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = BOX_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN DOZEN_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = DOZEN_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN RETAIL_PACK_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = RETAIL_PACK_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN DISPENSER_DISPLAY_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = DISPENSER_DISPLAY_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN DISPLAY_DISPENSER_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = DISPLAY_DISPENSER_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN PACK_UOM   ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = PACK_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN CARTON_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = CARTON_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN EACH_UOM   ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = EACH_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN ROLL_UOM   ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = ROLL_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN SPOOL_UOM  ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = SPOOL_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN KIT_UOM    ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = KIT_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN ALT_PIECE_UOM ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = ALT_PIECE_UOM.INVENTORY_ITEM_ID
  LEFT OUTER JOIN (SELECT 
      MTLT.INVENTORY_ITEM_ID, 
      CONCAT_WS(',', COLLECT_LIST(WAREHOUSE)) RULE_LIST
    FROM
    (SELECT 
        INVENTORY_ITEM_ID,
        MTL_PARAMETERS.ORGANIZATION_CODE WAREHOUSE
    FROM
        MTL_SYSTEM_ITEMS_B,
        MTL_PARAMETERS
    WHERE 
        MTL_SYSTEM_ITEMS_B.ORGANIZATION_ID = MTL_PARAMETERS.ORGANIZATION_ID
        AND MTL_SYSTEM_ITEMS_B.ORGANIZATION_ID IN (126, 127, 3889 )
        AND MTL_SYSTEM_ITEMS_B.ITEM_TYPE = 'FINISHED GOODS'
    ) MTLT
    GROUP BY 
    MTLT.INVENTORY_ITEM_ID) ORG_LIST
    ON MTL_SYSTEM_ITEMS_B.INVENTORY_ITEM_ID = ORG_LIST.INVENTORY_ITEM_ID
  WHERE NVL(MTL_SYSTEM_ITEMS_B.ORGANIZATION_ID, 0) IN  (124, 0)
  --  AND NVL(MTL_ITEM_CATEGORIES.ORGANIZATION_ID, 0) IN (124, 0)
                      """)
PRODUCT_DIMENSION_PREPARE.createOrReplaceTempView("PRODUCT_DIMENSION_PREPARE")
# PRODUCT_DIMENSION_PREPARE.persist(StorageLevel.MEMORY_AND_DISK)
# PRODUCT_DIMENSION_PREPARE.count()

# COMMAND ----------

UOM_CONVERSION_FROM = spark.sql("""
SELECT 
    INVENTORY_ITEM_ID, 
    DEFAULT_FROM.UOM_CODE, 
    NVL(ITEM_FROM.CONVERSION_RATE,DEFAULT_FROM.CONVERSION_RATE) CONVERSION_RATE
FROM
  (SELECT UOM_CODE, CONVERSION_RATE FROM MTL_UOM_CONVERSIONS
    WHERE INVENTORY_ITEM_ID = 0
    AND (DISABLE_DATE > CURRENT_DATE OR DISABLE_DATE IS NULL)) DEFAULT_FROM
LEFT OUTER JOIN 
    (SELECT INVENTORY_ITEM_ID, UOM_CODE, CONVERSION_RATE FROM MTL_UOM_CONVERSIONS
    WHERE INVENTORY_ITEM_ID <> 0
    AND (DISABLE_DATE > CURRENT_DATE OR DISABLE_DATE IS NULL) ) ITEM_FROM
ON DEFAULT_FROM.UOM_CODE = ITEM_FROM.UOM_CODE
""")

UOM_CONVERSION_FROM.createOrReplaceTempView("UOM_CONVERSION_FROM")
# UOM_CONVERSION_FROM.cache()
# UOM_CONVERSION_FROM.count()


UOM_CONVERSION_TO = spark.sql("""
SELECT 
    INVENTORY_ITEM_ID, 
    DEFAULT_TO.UOM_CODE, 
    NVL(ITEM_TO.CONVERSION_RATE,DEFAULT_TO.CONVERSION_RATE) CONVERSION_RATE
FROM
  (SELECT UOM_CODE, CONVERSION_RATE FROM MTL_UOM_CONVERSIONS
    WHERE INVENTORY_ITEM_ID = 0
    AND (DISABLE_DATE > CURRENT_DATE OR DISABLE_DATE IS NULL)) DEFAULT_TO
LEFT OUTER JOIN 
    (SELECT INVENTORY_ITEM_ID, UOM_CODE, CONVERSION_RATE FROM MTL_UOM_CONVERSIONS
    WHERE INVENTORY_ITEM_ID <> 0
    AND (DISABLE_DATE > CURRENT_DATE OR DISABLE_DATE IS NULL) ) ITEM_TO
ON DEFAULT_TO.UOM_CODE = ITEM_TO.UOM_CODE
""")

UOM_CONVERSION_TO.createOrReplaceTempView("UOM_CONVERSION_TO")
# UOM_CONVERSION_TO.cache()
# UOM_CONVERSION_TO.count()

# COMMAND ----------

STG_PDH_ALL_SYS_REBRAND1 = spark.sql("""
 SELECT DISTINCT 
                        ORACLE_PRDT_ID,
                        MAX(SBU) SBU,
                        MAX(PRDT_DIVISION) PRDT_DIVISION
                    FROM 
                        STG_PDH_ALL_SYS_REBRAND
                    WHERE STG_PDH_ALL_SYS_REBRAND.PRIM_ORGN = 'Y'
                      AND PROD_STAT_DESC = 'Active'
                      and ORACLE_PRDT_ID not in ('GTC')
                      and ORACLE_PRDT_ID not like 'Rule generated%'
                    GROUP BY 
                      ORACLE_PRDT_ID
                      """)
STG_PDH_ALL_SYS_REBRAND1.createOrReplaceTempView("STG_PDH_ALL_SYS_REBRAND1")


# COMMAND ----------

MTL_ITEM_CATEGORIES = spark.sql("""
  SELECT 
    inventory_item_id,
    category_id
  FROM MTL_ITEM_CATEGORIES
          WHERE MTL_ITEM_CATEGORIES.CATEGORY_SET_ID = 1100000045
          AND MTL_ITEM_CATEGORIES.ORGANIZATION_ID = 124
                      """)
MTL_ITEM_CATEGORIES.createOrReplaceTempView("MTL_ITEM_CATEGORIES")

# COMMAND ----------

W_PRODUCT_D = spark.sql("""
  SELECT 
    INT(PRODUCT_DIMENSION_PREPARE.INVENTORY_ITEM_ID) INTEGRATION_ID,
    PRODUCT_DIMENSION_PREPARE.CREATED_ON_DT,
    PRODUCT_DIMENSION_PREPARE.CHANGED_ON_DT,
    INT(PRODUCT_DIMENSION_PREPARE.CREATED_BY_ID),
    INT(PRODUCT_DIMENSION_PREPARE.CHANGED_BY_ID),
    DATE_FORMAT(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss.SSS') INSERT_DT,   
    DATE_FORMAT(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss.SSS') UPDATE_DT,
    'EBS' DATASOURCE_NUM_ID,
    DATE_FORMAT(CURRENT_TIMESTAMP(), 'yyyyMMddHHmmssSSS') LOAD_BATCH_ID,
    INT(PRODUCT_DIMENSION_PREPARE.INVENTORY_ITEM_ID) INVENTORY_ITEM_ID, 
    PRODUCT_DIMENSION_PREPARE.PART_NUM,
    PRODUCT_DIMENSION_PREPARE.ANS_STD_UOM,
    CASE 
      WHEN PRODUCT_DIMENSION_PREPARE.ANS_STD_UOM = 'PR' THEN PAIR_CONV
      WHEN PRODUCT_DIMENSION_PREPARE.ANS_STD_UOM = 'GR' THEN GROSS_CONV
      WHEN PRODUCT_DIMENSION_PREPARE.ANS_STD_UOM = 'PC' THEN PIECE_CONV 
      ELSE INT(1) 
    END ANS_STD_CONV,
    PRODUCT_DIMENSION_PREPARE.PRIMARY_UOM_CONV,
    PRODUCT_DIMENSION_PREPARE.PRIMARY_UOM_CODE,
    'N' DELETE_FLG,
    PRODUCT_DIMENSION_PREPARE.BUNDLE_CONV,
    PRODUCT_DIMENSION_PREPARE.BAG_CONV,
    PRODUCT_DIMENSION_PREPARE.BOX_CONV,
    PRODUCT_DIMENSION_PREPARE.CASE_CONV,
    PRODUCT_DIMENSION_PREPARE.ACASE_CONV,
    PRODUCT_DIMENSION_PREPARE.CARTON_CONV,
    PRODUCT_DIMENSION_PREPARE.DISPENSER_DISPLAY_CONV,
    PRODUCT_DIMENSION_PREPARE.DISPLAY_DISPENSER_CONV,
    PRODUCT_DIMENSION_PREPARE.DOZEN_CONV,
    PRODUCT_DIMENSION_PREPARE.EACH_CONV,
    PRODUCT_DIMENSION_PREPARE.GROSS_CONV,
    PRODUCT_DIMENSION_PREPARE.KIT_CONV,
    PRODUCT_DIMENSION_PREPARE.PIECE_CONV,
    PRODUCT_DIMENSION_PREPARE.PACK_CONV,
    PRODUCT_DIMENSION_PREPARE.PAIR_CONV,
    PRODUCT_DIMENSION_PREPARE.ALT_PIECE_CONV,
    PRODUCT_DIMENSION_PREPARE.ROLL_CONV,
    PRODUCT_DIMENSION_PREPARE.RETAIL_PACK_CONV,
    PRODUCT_DIMENSION_PREPARE.SPOOL_CONV,
    PRODUCT_DIMENSION_PREPARE.ITEM_DESCRIPTION,
    PRODUCT_DIMENSION_PREPARE.LEGACY_ASPN,
    PRODUCT_DIMENSION_PREPARE.STYLE_CODE,
    PRODUCT_DIMENSION_PREPARE.RULE_LIST, 
    PRODUCT_DIMENSION_PREPARE.MRPN,
    STG_PDH_ALL_SYS_REBRAND.SBU MDM_SBU,
    STG_PDH_ALL_SYS_REBRAND.PRDT_DIVISION MDM_PRODUCT_DIVISION,
    MTL_CATEGORIES_B.SEGMENT1  EBS_PRODUCT_DIVISION
  FROM PRODUCT_DIMENSION_PREPARE
    LEFT OUTER JOIN STG_PDH_ALL_SYS_REBRAND1 STG_PDH_ALL_SYS_REBRAND
      ON PRODUCT_DIMENSION_PREPARE.PART_NUM = STG_PDH_ALL_SYS_REBRAND.ORACLE_PRDT_ID
    LEFT OUTER JOIN  MTL_ITEM_CATEGORIES
      ON PRODUCT_DIMENSION_PREPARE.INVENTORY_ITEM_ID = MTL_ITEM_CATEGORIES.INVENTORY_ITEM_ID
    LEFT OUTER JOIN (select category_id, segment1 from mtl_categories_b) MTL_CATEGORIES_B
        ON MTL_ITEM_CATEGORIES.CATEGORY_ID = MTL_CATEGORIES_B.CATEGORY_ID
""")

W_PRODUCT_D.createOrReplaceTempView("W_PRODUCT_D")
# W_PRODUCT_D.cache()
#W_PRODUCT_D.count()

# COMMAND ----------

count = W_PRODUCT_D.select("INTEGRATION_ID").count()
countDistinct = W_PRODUCT_D.select("INTEGRATION_ID").distinct().count()

# print(count)
# print(countDistinct)

if(count != countDistinct):
  message = 'Mismatch in count of total records ({0}) and distinct count of primary keys ({1}) in {2} '.format(count, countDistinct, tableName)
  raise Exception(message)

# COMMAND ----------

W_PRODUCT_D.coalesce(10).write.format("parquet").mode("overwrite").save(targetFileUrl)

# COMMAND ----------

MTL_SYSTEM_ITEMS_B_INC.unpersist()
MTL_UOM_CONVERSIONS_INC.unpersist()
MTL_CROSS_REFERENCES.unpersist()
INCREMENT_STAGE_TABLE.unpersist()
PRODUCT_DIMENSION_PREPARE.unpersist()
UOM_CONVERSION_FROM.unpersist()
UOM_CONVERSION_TO.unpersist()
W_PRODUCT_D.unpersist()
